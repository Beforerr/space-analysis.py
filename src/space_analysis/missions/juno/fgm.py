# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../nbs/missions/juno/fgm.ipynb.

# %% auto 0
__all__ = ['JunoPhases', 'JunoFGMCoords', 'JunoFGMTimeResolutions', 'PDS_URL_FMT', 'load_jno_lbl', 'unpack_and_convert',
           'UnpackConvert', 'download_data']

# %% ../../../../nbs/missions/juno/fgm.ipynb 2
import os
import polars as pl
from zipfile import ZipFile
import pooch
from pooch.processors import Unzip

from pipe import filter
from ...utils.lbl import load_lbl

from typing import Literal, Callable
from functools import partial

# %% ../../../../nbs/missions/juno/fgm.ipynb 5
# | code-summary: type definitions
JunoPhases = Literal["CRUISE", "JUPITER"]
JunoFGMCoords = Literal["SE", "SS", "PL"]
JunoFGMTimeResolutions = Literal["1SEC", "1MIN", "FULL"]

# %% ../../../../nbs/missions/juno/fgm.ipynb 6
def unzip_convert_lbl(
    member: str, fname: str, extract_dir, load_func: Callable, clean=True, fmt="arrow"
):
    with ZipFile(fname, "r") as zip_file:
        lbl_fp = zip_file.extract(member, path=extract_dir)
        sts_fp = zip_file.extract(member.replace(".lbl", ".sts"), path=extract_dir)

        # Convert the file to a different format
        df = load_func(lbl_fp).collect()
        output_fp = lbl_fp.replace("lbl", fmt)
        df.write_ipc(output_fp)

        # Remove the lbl and sts files
        if clean:
            os.remove(lbl_fp)
            os.remove(sts_fp)

        return output_fp

# %% ../../../../nbs/missions/juno/fgm.ipynb 7
def load_jno_lbl(file: str):
    df: pl.DataFrame = pl.from_dataframe(load_lbl(file))
    return (
        df.lazy()
        .with_columns(
            time=pl.col("SAMPLE UTC").str.slice(0, 4).str.to_datetime("%Y")
            + pl.duration(
                milliseconds=(pl.col("DECIMAL DAY") - 1) * 24 * 60 * 60 * 1000
            )
        )
        .drop(["SAMPLE UTC", "DECIMAL DAY", "INSTRUMENT RANGE", "X", "Y", "Z"])
        .sort("time")
    )


def unpack_and_convert(fname, extract_dir, process_func=unzip_convert_lbl):
    """
    Post-processing hook to unzip a file and convert it to a different format in real-time. (Otherwise the files unzipped would take up too much space on the user's computer.)

    Parameters
    ----------
    fname : str
       Full path of the zipped file in local storage

    """

    with ZipFile(fname, "r") as zip_file:
        # Extract the data file from within the archive
        members = list(zip_file.namelist() | filter(lambda x: x.endswith(".lbl")))

    func = partial(
        process_func, fname=fname, extract_dir=extract_dir, load_func=load_jno_lbl
    )
    futures = list(map(func, members))

    return futures


class UnpackConvert(Unzip):
    old_fmt = "lbl"
    new_fmt = "arrow"

    def _extract_file(self, fname, extract_dir):
        unpack_and_convert(fname, extract_dir)

    def _all_members(self, fname):
        """Return all members from a given archive."""
        with ZipFile(fname, "r") as zip_file:
            files = zip_file.namelist()
            oldfiles = [f for f in files if f.endswith(self.old_fmt)]
            return [f.replace(self.old_fmt, self.new_fmt) for f in oldfiles]

# %% ../../../../nbs/missions/juno/fgm.ipynb 8
PDS_URL_FMT = "https://pds-ppi.igpp.ucla.edu/ditdos/download?id=pds://PPI/{dataset}/DATA/{phase}/{coord}/{datatype}"


def download_data(
    dataset="JNO-SS-3-FGM-CAL-V1.0",
    phase: JunoPhases = "CRUISE",
    coord: JunoFGMCoords = "SE",
    datatype: JunoFGMTimeResolutions = "1SEC",  # time resolution
    processor: Callable = None,
    url_fmt=PDS_URL_FMT,
    fmt="arrow",
) -> list[str]:
    url = url_fmt.format(dataset=dataset, phase=phase, coord=coord, datatype=datatype)

    if processor is None:
        processor = UnpackConvert()  # default processor, needed to be created here!!!

    files = pooch.retrieve(
        url=url,
        known_hash=None,
        progressbar=True,
        processor=processor,
    )

    return sorted(files | filter(lambda x: x.endswith(f".{fmt}")))
