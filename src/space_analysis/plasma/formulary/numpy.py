# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../nbs/plasma/00_formulary_numpy.ipynb.

# %% auto 0
__all__ = ['DEFAULT_B_UNIT', 'DEFAULT_N_UNIT', 'DEFAULT_SPEED_UNIT', 'DEFAULT_LENGTH_UNIT', 'DEFAULT_CURRENT_UNIT',
           'DEFAULT_PARTICLE', 'DEFAULT_B_TIME_GRADIENT_UNIT', 'np_Alfven_speed', 'np_Alfven_current',
           'np_inertial_length', 'np_gradient_current']

# %% ../../../../nbs/plasma/00_formulary_numpy.ipynb 1
import numpy as np
import astropy.units as u
from astropy.constants import mu0, e
from plasmapy.particles import ParticleLike
from plasmapy.formulary import Alfven_speed
from plasmapy.formulary.lengths import inertial_length

DEFAULT_B_UNIT = u.nT
DEFAULT_N_UNIT = u.cm**-3
DEFAULT_SPEED_UNIT = u.km / u.s
DEFAULT_LENGTH_UNIT = u.km
DEFAULT_CURRENT_UNIT = u.nA / u.m**2
DEFAULT_PARTICLE = "p+"

DEFAULT_B_TIME_GRADIENT_UNIT = DEFAULT_B_UNIT / u.s

# %% ../../../../nbs/plasma/00_formulary_numpy.ipynb 2
def np_Alfven_speed(
    B: np.ndarray,  # magnetic field in the plasma, could be a component, as plasmapy will take `abs` of it
    density: np.ndarray,  # particle density of the plasma
    ion: ParticleLike = DEFAULT_PARTICLE,
    sign=True,
    B_unit: u.Unit = DEFAULT_B_UNIT,
    n_unit: u.Unit = DEFAULT_N_UNIT,
    speed_unit: u.Unit = DEFAULT_SPEED_UNIT,
):
    B_u = B * B_unit
    density_u = density * n_unit

    Alfven_speed_u = Alfven_speed(B=B_u, density=density_u, ion=ion).to(speed_unit)
    # The result is always positive because of the plasmapy
    if sign:
        return np.sign(B_u) * Alfven_speed_u
    else:
        return Alfven_speed_u


def np_Alfven_current(
    Alfven_speed: np.ndarray,
    density: np.ndarray,
    speed_unit: u.Unit = DEFAULT_SPEED_UNIT,
    n_unit: u.Unit = DEFAULT_N_UNIT,
    current_unit: u.Unit = DEFAULT_CURRENT_UNIT,
):
    Alfven_speed_u = Alfven_speed * speed_unit
    density_u = density * n_unit
    return (e.si * Alfven_speed_u * density_u).to(current_unit)

# %% ../../../../nbs/plasma/00_formulary_numpy.ipynb 3
def np_inertial_length(
    density: np.ndarray,
    ion: ParticleLike = DEFAULT_PARTICLE,
    n_unit: u.Unit = DEFAULT_N_UNIT,
    length_unit: u.Unit = DEFAULT_LENGTH_UNIT,
):
    density_u = density * n_unit
    return inertial_length(density_u, ion).to(length_unit)

# %% ../../../../nbs/plasma/00_formulary_numpy.ipynb 4
def np_gradient_current(
    B_gradient,
    speed,
    B_gradient_unit=DEFAULT_B_TIME_GRADIENT_UNIT,
    speed_unit=DEFAULT_SPEED_UNIT,
    current_unit=DEFAULT_CURRENT_UNIT,
):
    B_gradient_u = B_gradient * B_gradient_unit
    speed_u = speed * speed_unit

    return (B_gradient_u / speed_u / mu0).to(current_unit)
