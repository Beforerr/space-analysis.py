# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/utils/21_cdas.ipynb.

# %% auto 0
__all__ = ['cdas', 'get_dataset_variables', 'get_data', 'Variables']

# %% ../../../nbs/utils/21_cdas.ipynb 1
from cdasws import CdasWs
from loguru import logger
from cdasws.datarepresentation import DataRepresentation
import xarray as xr
import polars as pl
from ..core import Dataset as V
from pydantic import ConfigDict, model_validator

# %% ../../../nbs/utils/21_cdas.ipynb 2
cdas = CdasWs()

# %% ../../../nbs/utils/21_cdas.ipynb 3
def get_dataset_variables(dataset: str):
    variables_dict = cdas.get_variables(dataset)
    for variable in variables_dict:
        logger.info(variable["Name"], variable["LongDescription"])

    return [variable["Name"] for variable in variables_dict]


def get_data(dataset, timerange, variables: list = None) -> xr.Dataset:
    variables = variables or get_dataset_variables(dataset)

    _, data = cdas.get_data(
        dataset,
        variables=variables,
        time0=timerange[0],
        time1=timerange[1],
        DataRepresentation=DataRepresentation.XARRAY,
    )

    return data

# %% ../../../nbs/utils/21_cdas.ipynb 4
class Variables(V):
    model_config = ConfigDict(arbitrary_types_allowed=True)

    data: xr.Dataset = None

    # initize products from provider and dataset if not provided
    @model_validator(mode="after")
    def check_products(self):
        if self.parameters is None:
            self.parameters = get_dataset_variables(self.dataset)

    def retrieve_data(self):
        self.data = get_data(self.dataset, self.timerange, self.parameters)
        return self

    def get_data(self):
        if self.data is None:
            self.retrieve_data()
        return self.data

    def to_polars(self):
        return pl.DataFrame(self.to_pandas().reset_index())

    def to_pandas(self):
        return self.get_data().to_pandas()
