# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/examples/10_mission_info.ipynb.

# %% auto 0
__all__ = ['parse_mission_yaml', 'parse_missions_yaml', 'find_instrument', 'parse_missions', 'merge_dfs']

# %% ../../../nbs/examples/10_mission_info.ipynb 0
import yaml
import polars as pl
from ..core import Mission, Instrument, InstrumentSuite
from pathlib import Path

# %% ../../../nbs/examples/10_mission_info.ipynb 1
def parse_mission_yaml(file: Path):
    with open(file, "r") as stream:
        data = yaml.safe_load(stream)
    return Mission(**data)


def parse_missions_yaml(dir: Path, suffixs=[".yaml", ".yml"]):
    """Parse the mission yaml files in the given directory"""
    return [parse_mission_yaml(f) for f in dir.iterdir() if f.suffix in suffixs]

# %% ../../../nbs/examples/10_mission_info.ipynb 2
# Recursive function to find magnetometers
def find_instrument(instruments: list[Instrument | InstrumentSuite], ins_type):
    ins_suites = [i for i in instruments if isinstance(i, InstrumentSuite)]
    ins_in_suite = [i for suite in ins_suites for i in suite.instruments]
    ins_out_suite = [i for i in instruments if isinstance(i, Instrument)]

    return [i for i in ins_in_suite + ins_out_suite if i.type == ins_type]


def parse_missions(data: list[Mission], info, ins_type=None):
    rows = []

    for mission in data:
        if ins_type is None:
            rows.append([mission.name, mission.model_dump(warnings="none").get(info)])
            continue
        instruments = find_instrument(mission.instruments, ins_type)
        for i in instruments:
            rows.append([mission.name, i.model_dump(warnings="none").get(info)])

    return pl.DataFrame(rows, schema=["Mission", info], orient="row")


# Define the merge function
def merge_dfs(left: pl.DataFrame, right, on="Mission", how="full", coalesce=True):
    return left.join(right, on=on, how=how, coalesce=coalesce)
