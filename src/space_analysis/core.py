# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['model_config', 'Variable', 'Variables', 'MagVariable', 'DensityVariable', 'VelocityVariable', 'TempVariable',
           'Dataset', 'Instrument', 'InstrumentSuite', 'Mission']

# %% ../../nbs/00_core.ipynb 1
from pydantic import BaseModel, ConfigDict, Field
from datetime import datetime, timedelta

# %% ../../nbs/00_core.ipynb 2
model_config = ConfigDict(extra="allow")

# %% ../../nbs/00_core.ipynb 4
def list2dict(variables: list):
    return {v.name: v for v in variables}


def normalize(v):
    """Utility function to convert a list to a dictionary"""
    return list2dict(v) if isinstance(v, list) else v


def normalize_t(type, v):
    """Utility function to convert a list of `type` to a dictionary"""
    return (
        list2dict(v)
        if isinstance(v, list) and all(isinstance(x, type) for x in v)
        else v
    )


def add_v(self, name, v):
    return getattr(self, name).update({v.name: v})

# %% ../../nbs/00_core.ipynb 6
class Variable(BaseModel):
    model_config = model_config

    name: str = None
    description: str = None
    unit: str = None
    ts: timedelta = (
        None  # default time resolution, although it can vary in the real data
    )
    timerange: list[datetime] = None

    dataset: str = None  # the dataset that this variable belongs to
    parameter: list[str] = None  # the parameter(s) that this variable represents


class Variables(BaseModel):
    timerange: list[datetime] = None
    variables: dict[str, Variable] = None

    def add_variable(self, v):
        add_v(self, "variables", v)

# %% ../../nbs/00_core.ipynb 8
class MagVariable(Variable):
    B_cols: list[str] = None


class DensityVariable(Variable):
    density: str = None


class VelocityVariable(Variable):
    velocity: str | list[str] = None
    speed: str = None


class TempVariable(Variable):
    temperature: str = None
    para_temp: str = None
    perp_temp: str | list[str] = None

# %% ../../nbs/00_core.ipynb 10
class Dataset(Variables):
    model_config = model_config

    name: str = None
    dataset: str = None  # ID of the dataset (like the `ProductKey` used in the SPASE)
    parameters: list[str] = None  # list of parameter names (core variables)
    ts: timedelta = None  # time resolution (all variables in one dataset have the same time resolution)

# %% ../../nbs/00_core.ipynb 12
class Instrument(BaseModel):
    model_config = model_config

    name: str
    datasets: list[Dataset] = Field(default_factory=list)

    type: str = None
    names_list: list[str] = None

    def add_dataset(self, dataset: Dataset):
        self.datasets.append(dataset)


class InstrumentSuite(BaseModel):
    model_config = model_config

    name: str
    names_list: list[str] = None
    type: str = "suite"
    instruments: list[Instrument] = Field(default_factory=list)
    # field_validator("instruments", mode="before")(normalize)


class Mission(BaseModel):
    model_config = model_config

    name: str
    """Name of the mission"""
    instruments: list[Instrument | InstrumentSuite] = Field(default_factory=list)
    datasets: list[Dataset] = Field(default_factory=list)
    names_list: list[str] = None

    def add_instrument(self, v):
        add_v(self, "instruments", v)
