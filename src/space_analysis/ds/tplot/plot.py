# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../nbs/data_structure/tplot/02_plot.ipynb.

# %% auto 0
__all__ = ['ProcessConfig', 'PanelConfig', 'Config', 'update_panel', 'plot', 'export', 'process', 'load_data', 'update_tvar',
           'process_panel']

# %% ../../../../nbs/data_structure/tplot/02_plot.ipynb 0
from pydantic import (
    BaseModel,
    field_validator,
)
from ..config import Config as ConfigBase
from ..config import PanelConfig as PanelConfigBase
from .trans import TransformOp

import pyspedas
from cdasws import CdasWs

import pytplot
from pytplot import tplot, options
import matplotlib.pyplot as plt
from loguru import logger
from . import export2csv

from matplotlib.pyplot import Figure, Axes

# %% ../../../../nbs/data_structure/tplot/02_plot.ipynb 1
class ProcessConfig(BaseModel):
    tvar: str = None
    trans: list[TransformOp] = list()

    @field_validator("trans", mode="before")
    @classmethod
    def check_transforms(cls, v: list[dict | str]):
        return [({"name": tran} if isinstance(tran, str) else tran) for tran in v]

# %% ../../../../nbs/data_structure/tplot/02_plot.ipynb 2
class PanelConfig(PanelConfigBase):
    process: ProcessConfig = ProcessConfig()


class Config(ConfigBase):
    panels: list[PanelConfig]

# %% ../../../../nbs/data_structure/tplot/02_plot.ipynb 3
def update_panel(ax: Axes, config: PanelConfig):
    pass


def plot(
    tvars2plot: list[str],
    config: Config,
    fig: Figure = None,
    axes: list[Axes] = None,
    **kwargs,
) -> tuple[Figure, list[Axes]]:
    if not isinstance(tvars2plot, list):
        tvars2plot = [tvars2plot]

    panel_configs = config.panels
    output_config = config.output

    if fig is None or axes is None:
        nrows = len(tvars2plot)
        fig, axes = plt.subplots(nrows=nrows, sharex=True, **kwargs)
        axes = [axes] if isinstance(axes, Axes) else axes

    for ax, tvar, panel_config in zip(axes, tvars2plot, panel_configs):
        tplot(tvar, fig=fig, axis=ax, display=False)
        update_panel(ax, panel_config)

    fig.set(**output_config.figure)
    output_config.figure_extra.process_figure(fig)

    return fig, axes


def export(tvars2plot: list, config: Config, plot_kwargs: dict = dict(), **kwargs):
    fig, axes = plot(tvars2plot, config, **plot_kwargs)

    output_config = config.output
    path = output_config.path

    for fmt in output_config.formats:
        match fmt:
            case "csv":
                export2csv(tvars2plot, path)
            case "display":
                fig.show()
            case _:
                fig.savefig(f"{path}.{fmt}", **kwargs)

    return fig, axes

# %% ../../../../nbs/data_structure/tplot/02_plot.ipynb 4
def process(tvar: str | list[str], config: ProcessConfig):
    for tran in config.trans:
        tvar = tran.transform_func(
            tvar, **tran.model_dump(exclude=["name", "transform_func"])
        )
    return tvar

# %% ../../../../nbs/data_structure/tplot/02_plot.ipynb 5
def load_data(config: PanelConfig, load_func=None):
    if isinstance(config, list):
        return [load_data(c) for c in config]

    timerange = [time.isoformat() for time in config.timerange]
    var = config.id

    if load_func is None:
        if config.satellite and config.instrument:
            mod = getattr(pyspedas, config.satellite)
            load_func = getattr(mod, config.instrument)
        elif config.ds:
            cdas = CdasWs()
            status, data = cdas.get_data(config.ds, var, timerange[0], timerange[1])
            pytplot.store_data(var, {"x": data[var].Epoch, "y": data[var]})
            return var
        else:
            logger.error("No load function provided")
            return None

    load_args = {
        "trange": timerange,
        "time_clip": True,
        "varnames": config.id,
    }

    # Conditionally add the 'datatype' and 'probe' argument
    if config.datatype is not None:
        load_args["datatype"] = config.datatype
    if config.probe is not None:
        load_args["probe"] = config.probe

    return load_func(**load_args)

# %% ../../../../nbs/data_structure/tplot/02_plot.ipynb 6
def update_tvar(tvar, config: PanelConfig):
    options(tvar, "thick", 2)
    # options(tvar, "char_size", 16)
    if config.name is not None:
        options(tvar, "ytitle", f"{config.name}")
    if config.units is not None:
        if config.units == "":
            options(tvar, "ysubtitle", "")
        options(tvar, "ysubtitle", f"[{config.units}]")

    return tvar


def process_panel(
    config: PanelConfig,
    process_func=process,
    load_func=load_data,
    update_func=update_tvar,
):
    tvar = load_func(config)

    if isinstance(tvar, list):
        tvar = tvar[0]

    tvar_processed = process_func(tvar, config=config.process)
    logger.debug(f"Processed tvar: {tvar_processed}")
    return update_func(tvar_processed, config=config)
