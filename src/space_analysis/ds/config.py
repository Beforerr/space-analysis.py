# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/data_structure/00_config.ipynb.

# %% auto 0
__all__ = ['DataConfig', 'DataConfigSatellite', 'OutputConfig', 'PanelConfig', 'Config']

# %% ../../../nbs/data_structure/00_config.ipynb 0
from pydantic import StringConstraints, model_validator, BaseModel
from pydantic.dataclasses import dataclass, Field

from datetime import datetime, date

from typing import Annotated

from beforerr.matplotlib import PlotOpts

# %% ../../../nbs/data_structure/00_config.ipynb 1
@dataclass
class DataConfig:
    """Data configuration"""

    timerange: list[date | datetime] = None

    ds: str = None
    id: str = None
    name: str = None
    units: str = None
    labels: list[str] = Field(default_factory=list)

    satellite: Annotated[str, StringConstraints(to_lower=True)] = None
    instrument: Annotated[str, StringConstraints(to_lower=True)] = None
    datatype: str = None
    probe: str = None


class DataConfigSatellite(BaseModel):
    """Data configuration for one satellite"""

    timerange: list[date | datetime] = None
    ids: list[str] = Field(default_factory=list)

    satellite: str = None
    instruments: list[str] = Field(default_factory=list)
    probe: str = None

    @property
    def data_configs(self):
        if len(self.instruments) == len(self.ids):
            return [
                DataConfig(
                    **dict(self.model_dump(exclude_none=True), id=id, instrument=inst)
                )
                for id, inst in zip(self.ids, self.instruments)
            ]

# %% ../../../nbs/data_structure/00_config.ipynb 2
@dataclass
class OutputConfig:
    """Output configuration"""

    path: str = None
    filename: str = None

    formats: list[str] = Field(default_factory=list)
    display: bool = False

    figure: dict = Field(default_factory=dict)
    """Figure options"""

    figure_extra: PlotOpts = Field(default_factory=PlotOpts)
    """Extra figure options"""


class PanelConfig((BaseModel)):
    """Panel configuration"""

    timerange: list[date | datetime] = None

    ds: str = None
    id: str = None
    name: str = None
    units: str = None
    labels: list[str] = Field(default_factory=list)

    satellite: Annotated[str, StringConstraints(to_lower=True)] = None
    instrument: Annotated[str, StringConstraints(to_lower=True)] = None
    datatype: str = None
    probe: str = None

# %% ../../../nbs/data_structure/00_config.ipynb 3
class Config(BaseModel):
    panels: list[PanelConfig]
    timerange: list[datetime | date] = None
    output: OutputConfig = None
    backend: str = None

    @model_validator(mode="before")
    def set_default_timerange(cls, values):
        timerange = values.get("timerange", None)
        panels = values.get("panels", [])

        if timerange:
            for panel in panels:
                panel["timerange"] = panel.get("timerange") or timerange
        return values
