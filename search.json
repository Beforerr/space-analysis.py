[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "space-analysis.py",
    "section": "",
    "text": "Still in active development, use with caution.\nInspired from SpaceAnalysis.jl, created with nbdev."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "space-analysis.py",
    "section": "References",
    "text": "References\n\nspeasy : Python client for Space Physics web services such as CDAWEB or AMDA\npyspedas : Python Space Physics Environment Data Analysis Software\nfastcore : Python supercharged for the fastai library"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "space-analysis.py",
    "section": "Install",
    "text": "Install\npip install space_analysis"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "space-analysis.py",
    "section": "How to use",
    "text": "How to use"
  },
  {
    "objectID": "examples/01_cdas.html",
    "href": "examples/01_cdas.html",
    "title": "CDAS Example Jupyter Notebook",
    "section": "",
    "text": "This Jupyter notebook demonstrates using cdas related rountine and the cdasws Python package, for accessing the Coordinate Data Analysis System (CDAS) web services",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#references",
    "href": "examples/01_cdas.html#references",
    "title": "CDAS Example Jupyter Notebook",
    "section": "References",
    "text": "References\n\nCDAS RESTful Web Services\n\nCdasWs Basic Example with Xarray\n\ncdasws API documentation\nFAQ\n\n\n\n\nImporting libraries\nfrom cdasws import CdasWs\nfrom loguru import logger\nfrom cdasws.datarepresentation import DataRepresentation\nimport xarray as xr\nimport pandas as pd\nimport polars as pl\n\nfrom great_tables import GT, md, html\n\n\n\n\nCode\ncdas = CdasWs()",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#get-observatory-groups-with-observatory-ids-identifiers",
    "href": "examples/01_cdas.html#get-observatory-groups-with-observatory-ids-identifiers",
    "title": "CDAS Example Jupyter Notebook",
    "section": "Get observatory groups with observatory ids (identifiers)",
    "text": "Get observatory groups with observatory ids (identifiers)\nThe following code demonstrates how to get the list of observatory groups with their respective observatory ids.\n\n\nCode\nobs_groups = cdas.get_observatory_groups()\n\n\n\n\nConvert to a DataFrame and display\nobs_groups_df = pl.DataFrame(obs_groups)\nGT(obs_groups_df.with_columns(pl.col(\"ObservatoryId\").list.join(\", \"))).tab_header(\n    title=\"CDAS Observatory Groups\",\n).cols_label(\n    ObservatoryId=\"Observatory Ids (list of identifiers for observatories that belong to this group)\"\n)\n\n\n\n\n\n  \n    CDAS Observatory Groups\n  \nName\nObservatory Ids (list of identifiers for observatories that belong to this group)\n\n\n  ACE\n  AC, ACE, OMNI (1AU IP Data)\n\n\n  AIM\n  AIM CIPS PMC SCI\n\n\n  AMPTE\n  AMPTE-CCE\n\n\n  ARTEMIS\n  THB, THC\n\n\n  Alouette\n  Alouette-2\n\n\n  Apollo\n  ALSEP\n\n\n  Arase (ERG)\n  (null), Arase(ERG), ERG\n\n\n  Balloons\n  PMC Turbo, bar_1A, bar_1B, bar_1C, bar_1D, bar_1G, bar_1H, bar_1I, bar_1J, bar_1K, bar_1M, bar_1N, bar_1O, bar_1Q, bar_1R, bar_1S, bar_1T, bar_1U, bar_1V, bar_2A, bar_2B, bar_2C, bar_2D, bar_2E, bar_2F, bar_2I, bar_2K, bar_2L, bar_2M, bar_2N, bar_2O, bar_2P, bar_2Q, bar_2T, bar_2W, bar_2X, bar_2Y, bar_3A, bar_3B, bar_3C, bar_3D, bar_3E, bar_3F, bar_3G, bar_4A, bar_4B, bar_4C, bar_4D, bar_4E, bar_4F, bar_4G, bar_4H, bar_5A, bar_6A, bar_7A\n\n\n  CNOFS\n  CNOFS\n\n\n  CRRES\n  CRRES Satellite\n\n\n  Cassini\n  CASSINI, Cassini\n\n\n  Cluster\n  C1, C2, C3, C4, CL, CT\n\n\n  DMSP\n  DMSP, dmsp, dmsp-f16, dmsp-f17, dmsp-f18\n\n\n  DSCOVR\n  DSCOVR\n\n\n  Dynamics Explorer\n  DE, DE-1, DE1\n\n\n  Equator-S\n  EQ\n\n\n  FAST\n  FAST\n\n\n  Formosat\n  FS-5, ROCSAT-1(FORMOSAT-1)\n\n\n  GOES\n  G0, G10, G12, GOES-08, GOES-09, GOES-10, GOES-11, GOES-12, GOES-13, GOES-14, GOES-15, GOES-16, GOES-17, GOES10, GOES11, GOES12, GOES13, GOES14, GOES15, GOES16, GOES17, GOES18, GOES8, GOES9, GOES_10, GOES_11, GOES_12, GOES_6, GOES_7, GOES_8, GOES_9, g11\n\n\n  GOLD\n  GOLD\n\n\n  GPS\n  GPS\n\n\n  Genesis\n  Genesis\n\n\n  Geosynchronous Investigations\n  STPSat-6\n\n\n  Geotail\n  GEOTAIL\n\n\n  Ground-Based Investigations\n  CANOPUS, DARN, FMI, SESAME, THG_L2\n\n\n  Hawkeye\n  HK\n\n\n  Helio Ephemeris\n  BEPICOLOMBO, BORRELLY, COMETGS, COMETHMP, DAWN, EARTH, GALILEO, GIACOBINI, GIOTTO, HALEBOPP, HALLEY, HYAKUTAKE, JUNO, JUPITER, MARS, MERCURY, MSL, NEPTUNE, PHOBOS2, PLUTO, ROSETTA, SAKIGAKE, SATURN, SUISEI, URANUS, VENUS, WILD2\n\n\n  Helios\n  HELIOS, HELIOS-1, HELIOS-2, HELIOS1, HELIOS2, Helios-1, Helios-2\n\n\n  IBEX\n  IBEX\n\n\n  ICON\n  ICON\n\n\n  IMAGE\n  IM, IMAGE\n\n\n  IMP (All)\n  I8, IMP-8, IMP7, IMP8, OMNI (1AU IP Data)\n\n\n  ISEE\n  ISEE 1, ISEE-1, ISEE-3, ISEE1, ISEE2\n\n\n  ISIS\n  ISIS-1, ISIS-2\n\n\n  ISS\n  ISS\n\n\n  Interball\n  INTERBALL-AURORAL, INTERBALL-GROUND, INTERBALL-TAIL\n\n\n  LANL\n  L1, LANL-97A, LANL1989_046, LANL1990_095, LANL1991_080, LANL1994_084, Lanl-01A, Lanl-02A, Lanl-97A, Lanl1989_046, Lanl1990_095, Lanl1991_080, Lanl1994_084\n\n\n  MAVEN\n  MAVEN\n\n\n  MESSENGER\n  MESSENGER\n\n\n  MMS\n  MMS1, MMS2, MMS3, MMS4, mms1, mms2, mms3, mms4\n\n\n  Mariner\n  Mariner2\n\n\n  Mars Science Laboratory (MSL)\n  MSL\n\n\n  NOAA\n  MetOp1, MetOp2, MetOp3, NOAA05, NOAA07, NOAA08, NOAA10, NOAA12, NOAA14, NOAA15, NOAA16, NOAA18, NOAA19\n\n\n  New Horizons\n  NEW_HORIZONS, NH\n\n\n  OMNI (Combined 1AU IP Data; Magnetic and Solar Indices)\n  OMNI (1AU IP Data)\n\n\n  POES/MetOp\n  MetOp1, MetOp2, MetOp3, NOAA15, NOAA16, NOAA18, NOAA19\n\n\n  Parker Solar Probe (PSP)\n  PSP, PSP_FLD\n\n\n  Pioneer\n  PIONEER10, PIONEER11, Pioneer10, Pioneer11, Pioneer6, Pioneer7, PioneerVenus\n\n\n  Polar\n  PO, POLAR, Polar, po\n\n\n  REACH\n  reach\n\n\n  SAMPEX\n  SAMPEX\n\n\n  SOHO\n  SOHO\n\n\n  ST5\n  ST5\n\n\n  STEREO\n  Ahead, Behind, STA, STB, STEREO, STEREOA, STEREOB, sta, stb\n\n\n  Smallsats/Cubesats\n  CSSWE, Munin, SNOE, ac6a, ac6b, ela, elb\n\n\n  Solar Orbiter\n  SOLO, solo\n\n\n  Sounding Rockets\n  Dynamo-2, Endurance, RENU2, TOOWINDY\n\n\n  THEMIS\n  THA, THB, THC, THD, THE, THEMIS, THG, THG_L1, THG_L2\n\n\n  TIMED\n  TIMED\n\n\n  TSS-1R\n  TSS-1R\n\n\n  TWINS\n  TWINS-, TWINS1, TWINS2\n\n\n  Ulysses\n  ULYSSES, Ulysses\n\n\n  Van Allen Probes (RBSP)\n  RBSP, RBSP-A, RBSP-A-RBSPICE, RBSP-B, RBSP-B-RBSPICE, RBSPA, RBSPB, rbsp-a, rbsp-b, rbspa, rbspb\n\n\n  Voyager\n  VG1, VG2, VGR-1, VGR-2, VOYAGER1, VOYAGER2, Voyager1, Voyager2\n\n\n  Wind\n  OMNI (1AU IP Data), WI, WIND, Wi, Wind, wi",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#get-intrument-types",
    "href": "examples/01_cdas.html#get-intrument-types",
    "title": "CDAS Example Jupyter Notebook",
    "section": "Get Intrument Types",
    "text": "Get Intrument Types\nThe following code demonstrates how to get the available instrument types.\n\n\nCode\ninstr_types = cdas.get_instrument_types()\nfor index, instr_type in enumerate(instr_types):\n    print(instr_type['Name'])\n\n\nActivity Indices\nElectric Fields (space)\nElectron Precipitation Bremsstrahlung\nEnergetic Particle Detector\nEngineering\nEphemeris/Attitude/Ancillary\nGamma and X-Rays\nGround-Based HF-Radars\nGround-Based Imagers\nGround-Based Magnetometers, Riometers, Sounders\nGround-Based VLF/ELF/ULF, Photometers\nHousekeeping\nImaging and Remote Sensing (ITM/Earth)\nImaging and Remote Sensing (Magnetosphere/Earth)\nImaging and Remote Sensing (Sun)\nMagnetic Fields (Balloon)\nMagnetic Fields (space)\nParticles (space)\nPlasma and Solar Wind\nPressure gauge (space)\nRadio and Plasma Waves (space)\nSpacecraft Potential Control\nUV Imaging Spectrograph (Space)",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#get-datasets",
    "href": "examples/01_cdas.html#get-datasets",
    "title": "CDAS Example Jupyter Notebook",
    "section": "Get Datasets",
    "text": "Get Datasets\nThe following code demontrates how to get a list of datasets.",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#gets-descriptions-of-the-observatory-groups-and-associated-instruments-from-the-server.",
    "href": "examples/01_cdas.html#gets-descriptions-of-the-observatory-groups-and-associated-instruments-from-the-server.",
    "title": "CDAS Example Jupyter Notebook",
    "section": "Gets descriptions of the observatory groups (and associated instruments) from the server.",
    "text": "Gets descriptions of the observatory groups (and associated instruments) from the server.\n\n\nCode\nobs_groups_and_instrs = cdas.get_observatory_groups_and_instruments()\n\n\n\n\nCode\nimport yaml\nobs_groups_and_instrs\n\n# save to a file\nwith open('obs_groups_and_instrs.yaml', 'w') as file:\n    documents = yaml.dump(obs_groups_and_instrs, file)\n\n\n\n\nConvert to a DataFrame and display it beautifully\n# Existing code to prepare the rows remains unchanged\nrows = []\nfor observatory in obs_groups_and_instrs:\n    for instrument_group in observatory['ObservatoryInstruments']:\n        for instrument in instrument_group['InstrumentDescription']:\n            rows.append({\n                'Observatory': observatory['Name'],\n                'Instrument Group': instrument_group['Name'],\n                'Instrument Name': instrument['Name'],\n                'Short Description': instrument['ShortDescription'],\n                'Long Description': instrument['LongDescription']\n            })\n\n# Convert to DataFrame\ndf = pd.DataFrame(rows)\n\n# Step 2: Adjust Column Multi-Index Creation\nindex_columns = ['Observatory', 'Instrument Group', 'Instrument Name']\nindex = pd.MultiIndex.from_frame(df[index_columns])\nobs_groups_instrs_df = df.drop(columns=index_columns).set_index(index)\n\nobs_groups_instrs_df\n\n\n\n\n\n\n\n\n\n\n\n\nShort Description\nLong Description\n\n\nObservatory\nInstrument Group\nInstrument Name\n\n\n\n\n\n\nACE\nAC\nCRIS\nACE Cosmic Ray Isotope Spectrometer\nACE Cosmic Ray Isotope Spectrometer\n\n\nDEF\nDefinitive Data\nDefinitive Data\n\n\nEPAM\nACE Electron Proton Alpha Monitor\nACE Electron Proton Alpha Monitor\n\n\nEPM\nACE Electron, Proton, and Alpha Monitor\nACE Electron, Proton, and Alpha Monitor\n\n\nGIFWALK\n\n\n\n\n...\n...\n...\n...\n...\n\n\nWind\nWIND\ndirectional-diff-h-flux-10min\ndirectional differential h fluxes 10min\ndirectional differential h fluxes 10min\n\n\ndirectional-diff-he-flux-10min\ndirectional differential he fluxes 10min\ndirectional differential he fluxes 10min\n\n\nWi\n3DP\nThree Dimensional Plasma Instrument Suite\nThree Dimensional Plasma Instrument Suite\n\n\nWind\n3DP\nThree Dimensional Plasma Instrument Suite\nThree Dimensional Plasma Instrument Suite\n\n\nwi\nSWE-Faraday\nSolar Wind Experiment Faraday Cup\nSolar Wind Experiment Faraday Cup\n\n\n\n\n2072 rows × 2 columns\n\n\n\n\n\n\nCode\n# Display it beautifully\nGT(obs_groups_instrs_df.head(100), rowname_col='Instrument Group', groupname_col='Observatory').tab_header(\n    title=\"CDAS Observatory Groups and Instruments\",\n)\n\n\n/Users/zijin/micromamba/envs/space_analysis/lib/python3.12/site-packages/great_tables/_tbl_data.py:236: FutureWarning: DataFrameGroupBy.grouper is deprecated and will be removed in a future version of pandas.\n  return {k: list(v) for k, v in g_df.grouper.indices.items()}\n\n\n\n\n\n  \n    CDAS Observatory Groups and Instruments\n  \n\nInstrument Name\nShort Description\nLong Description\n\n\n  ACE\n  AC\n  CRIS\n  ACE Cosmic Ray Isotope Spectrometer\n  ACE Cosmic Ray Isotope Spectrometer\n\n\n  AC\n  DEF\n  Definitive Data \n  Definitive Data \n\n\n  AC\n  EPAM\n  ACE Electron Proton Alpha Monitor\n  ACE Electron Proton Alpha Monitor\n\n\n  AC\n  EPM\n  ACE Electron, Proton, and Alpha Monitor\n  ACE Electron, Proton, and Alpha Monitor\n\n\n  AC\n  GIFWALK\n  \n  \n\n\n  AC\n  MAG\n  ACE Magnetic Field Instrument\n  ACE Magnetic Field Instrument\n\n\n  AC\n  MFI\n  ACE Magnetic Field Instrument\n  ACE Magnetic Field Instrument\n\n\n  AC\n  SEPICA\n  The Solar Energetic Particle Ionic Charge Analyzer \n  The Solar Energetic Particle Ionic Charge Analyzer \n\n\n  AC\n  SIS\n  ACE Solar Isotope Spectrometer\n  ACE Solar Isotope Spectrometer\n\n\n  AC\n  SWE\n  ACE Solar Wind Electron Proton Alpha Monitor\n  ACE Solar Wind Electron Proton Alpha Monitor\n\n\n  AC\n  SWEP\n  ACE Solar Wind Electron Proton Alpha Monitor\n  ACE Solar Wind Electron Proton Alpha Monitor\n\n\n  AC\n  SWICS\n  Solar Wind Ion Composition Spectrometer\n  Solar Wind Ion Composition Spectrometer\n\n\n  AC\n  SWICS_1.1\n  Solar Wind Ion Composition Spectrometer 1.1\n  Solar Wind Ion Composition Spectrometer 1.1\n\n\n  AC\n  SWICS_2.0\n  Solar Wind Ion Composition Spectrometer 2.0\n  Solar Wind Ion Composition Spectrometer 2.0\n\n\n  AC\n  ULEIS\n  Ultra Low Energy Isotope Spectrometer\n  Ultra Low Energy Isotope Spectrometer\n\n\n  ACE\n  SSC\n  Satellite Situation Center Ephemeris\n  Satellite Situation Center Ephemeris\n\n\n  OMNI (1AU IP Data)\n  IMF and Plasma data\n  IMF and Plasma data\n  IMF and Plasma data\n\n\n  OMNI (1AU IP Data)\n  IMF, Plasma, Indices, Energetic Proton Flux\n  IMF, Plasma, Indices, Energetic Proton Flux\n  IMF, Plasma, Indices, Energetic Proton Flux\n\n\n  OMNI (1AU IP Data)\n  merged magnetic field and plasma data from cohoweb\n  merged magnetic field and plasma data from cohoweb\n  merged magnetic field and plasma data from cohoweb\n\n\n  AIM\n  AIM CIPS PMC SCI\n  CIPS\n  Cloud Imaging and Particle Size\n  Cloud Imaging and Particle Size\n\n\n  AMPTE\n  AMPTE-CCE\n  EPI\n  Energetic Particles\n  Energetic Particles\n\n\n  ARTEMIS\n  THB\n  L1\n  L1 DATA\n  L1 DATA\n\n\n  THB\n  L2\n  L2 DATA\n  L2 DATA\n\n\n  THB\n  SSC\n  SSC data\n  SSC data\n\n\n  THB\n  position\n  sc positions\n  sc positions\n\n\n  THC\n  L1\n  L1 DATA\n  L1 DATA\n\n\n  THC\n  L2\n  L2 DATA\n  L2 DATA\n\n\n  THC\n  SSC\n  SSC data\n  SSC data\n\n\n  THC\n  position\n  sc positions\n  sc positions\n\n\n  Alouette\n  Alouette-2\n  LIM\n  Lima\n  Lima\n\n\n  Alouette-2\n  QUI\n  Quito\n  Quito\n\n\n  Alouette-2\n  SNT\n  Santiago\n  Santiago\n\n\n  Alouette-2\n  SOL\n  Falkland Islands\n  Falkland Islands\n\n\n  Alouette-2\n  TOPS\n  Topside Sounder\n  Topside Sounder\n\n\n  Alouette-2\n  WNK\n  Winkfield\n  Winkfield\n\n\n  Alouette-2\n  ula\n  Fairbanks\n  Fairbanks\n\n\n  Apollo\n  ALSEP\n  SWS\n  Solar Wind Spectrometer\n  Solar Wind Spectrometer\n\n\n  Arase (ERG)\n  (null)\n  PWE\n  Plasma Wave Experiment\n  Plasma Wave Experiment\n\n\n  Arase(ERG)\n  PWE\n  Plasma Wave Experiment\n  Plasma Wave Experiment\n\n\n  ERG\n  HEP\n  High-energy electron experiments\n  High-energy electron experiments\n\n\n  ERG\n  LEPE\n  Low-Energy Particle experiments - electron analyzer\n  Low-Energy Particle experiments - electron analyzer\n\n\n  ERG\n  LEPI\n  Low Energy Particle Ion experiment\n  Low Energy Particle Ion experiment\n\n\n  ERG\n  MEPE\n  Medium-Energy Particle experiments - electron analyzer\n  Medium-Energy Particle experiments - electron analyzer\n\n\n  ERG\n  MEPI\n  Medium Energy Particle experiments - ion mass analyzer\n  Medium Energy Particle experiments - ion mass analyzer\n\n\n  ERG\n  MGF\n  Magnetic Field Experiment\n  Magnetic Field Experiment\n\n\n  ERG\n  ORB\n  orbit\n  orbit\n\n\n  ERG\n  PWE\n  Plasma Wave Experiment\n  Plasma Wave Experiment\n\n\n  ERG\n  XEP\n  Extremely High-Energy Electron Experiment\n  Extremely High-Energy Electron Experiment\n\n\n  Balloons\n  PMC Turbo\n  BOLIDE\n  Balloon lidar experiment\n  Balloon lidar experiment\n\n\n  bar_1A\n  FSPC\n  Fast Spectra\n  Fast Spectra\n\n\n  bar_1A\n  HKPG\n  Housekeeping\n  Housekeeping\n\n\n  bar_1A\n  MAGN\n  Magnetometer\n  Magnetometer\n\n\n  bar_1A\n  MSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1A\n  RCNT\n  Rate CouNTers\n  Rate CouNTers\n\n\n  bar_1A\n  SSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1A\n  ephm\n  EPHeMeris\n  EPHeMeris\n\n\n  bar_1B\n  EPHM\n  Ephemeris\n  Ephemeris\n\n\n  bar_1B\n  FSPC\n  Fast Spectra\n  Fast Spectra\n\n\n  bar_1B\n  HKPG\n  Housekeeping\n  Housekeeping\n\n\n  bar_1B\n  MAGN\n  Magnetometer\n  Magnetometer\n\n\n  bar_1B\n  MSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1B\n  RCNT\n  Rate CouNTers\n  Rate CouNTers\n\n\n  bar_1B\n  SSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1C\n  EPHM\n  Ephemeris\n  Ephemeris\n\n\n  bar_1C\n  FSPC\n  Fast Spectra\n  Fast Spectra\n\n\n  bar_1C\n  HKPG\n  Housekeeping\n  Housekeeping\n\n\n  bar_1C\n  MAGN\n  Magnetometer\n  Magnetometer\n\n\n  bar_1C\n  MSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1C\n  RCNT\n  Rate CouNTers\n  Rate CouNTers\n\n\n  bar_1C\n  SSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1D\n  EPHM\n  Ephemeris\n  Ephemeris\n\n\n  bar_1D\n  FSPC\n  Fast Spectra\n  Fast Spectra\n\n\n  bar_1D\n  HKPG\n  Housekeeping\n  Housekeeping\n\n\n  bar_1D\n  MAGN\n  Magnetometer\n  Magnetometer\n\n\n  bar_1D\n  MSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1D\n  RCNT\n  Rate CouNTers\n  Rate CouNTers\n\n\n  bar_1D\n  SSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1G\n  EPHM\n  Ephemeris\n  Ephemeris\n\n\n  bar_1G\n  FSPC\n  Fast Spectra\n  Fast Spectra\n\n\n  bar_1G\n  HKPG\n  Housekeeping\n  Housekeeping\n\n\n  bar_1G\n  MAGN\n  Magnetometer\n  Magnetometer\n\n\n  bar_1G\n  MSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1G\n  RCNT\n  Rate CouNTers\n  Rate CouNTers\n\n\n  bar_1G\n  SSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1H\n  EPHM\n  Ephemeris\n  Ephemeris\n\n\n  bar_1H\n  FSPC\n  Fast Spectra\n  Fast Spectra\n\n\n  bar_1H\n  HKPG\n  Housekeeping\n  Housekeeping\n\n\n  bar_1H\n  MAGN\n  Magnetometer\n  Magnetometer\n\n\n  bar_1H\n  MSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1H\n  RCNT\n  Rate CouNTers\n  Rate CouNTers\n\n\n  bar_1H\n  SSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1I\n  EPHM\n  Ephemeris\n  Ephemeris\n\n\n  bar_1I\n  FSPC\n  Fast Spectra\n  Fast Spectra\n\n\n  bar_1I\n  HKPG\n  Housekeeping\n  Housekeeping\n\n\n  bar_1I\n  MAGN\n  Magnetometer\n  Magnetometer\n\n\n  bar_1I\n  MSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1I\n  RCNT\n  Rate CouNTers\n  Rate CouNTers\n\n\n  bar_1I\n  SSPC\n  Slow Spectra\n  Slow Spectra\n\n\n  bar_1J\n  EPHM\n  Ephemeris\n  Ephemeris\n\n\n  bar_1J\n  FSPC\n  Fast Spectra\n  Fast Spectra\n\n\n\n\n\n\n\n        \n\n\n\n\nCode\nobs_groups_instrs_df = pl.DataFrame(obs_groups_and_instrs)\nGT(obs_groups_instrs_df.with_columns(pl.col(\"ObservatoryId\").list.join(\", \"))).tab_header(\n    title=\"CDAS Observatory Groups\",\n).cols_label(\n    ObservatoryId=\"Observatory Ids (list of identifiers for observatories that belong to this group)\"\n)\n\n\n\n---------------------------------------------------------------------------\nColumnNotFoundError                       Traceback (most recent call last)\nCell In[10], line 3\n      1 #| code-summary: Convert to a DataFrame and display\n      2 obs_groups_instrs_df = pl.DataFrame(obs_groups_and_instrs)\n----&gt; 3 GT(obs_groups_instrs_df.with_columns(pl.col(\"ObservatoryId\").list.join(\", \"))).tab_header(\n      4     title=\"CDAS Observatory Groups\",\n      5 ).cols_label(\n      6     ObservatoryId=\"Observatory Ids (list of identifiers for observatories that belong to this group)\"\n      7 )\n\nFile ~/micromamba/envs/space_analysis/lib/python3.12/site-packages/polars/dataframe/frame.py:8317, in DataFrame.with_columns(self, *exprs, **named_exprs)\n   8171 def with_columns(\n   8172     self,\n   8173     *exprs: IntoExpr | Iterable[IntoExpr],\n   8174     **named_exprs: IntoExpr,\n   8175 ) -&gt; DataFrame:\n   8176     \"\"\"\n   8177     Add columns to this DataFrame.\n   8178 \n   (...)\n   8315     └─────┴──────┴─────────────┘\n   8316     \"\"\"\n-&gt; 8317     return self.lazy().with_columns(*exprs, **named_exprs).collect(_eager=True)\n\nFile ~/micromamba/envs/space_analysis/lib/python3.12/site-packages/polars/lazyframe/frame.py:1940, in LazyFrame.collect(self, type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, no_optimization, streaming, background, _eager)\n   1937 if background:\n   1938     return InProcessQuery(ldf.collect_concurrently())\n-&gt; 1940 return wrap_df(ldf.collect())\n\nColumnNotFoundError: ObservatoryId\n\nError originated just after this operation:\nDF [\"Name\", \"ObservatoryInstruments\"]; PROJECT */2 COLUMNS; SELECTION: \"None\"\n\n\n\n\n\nCode\n# obs_groups = cdas.get_observatory_groups()\n# datasets = cdas.get_datasets(observatoryGroup='Helio Ephemeris')\n# datasets = cdas.get_datasets(observatoryGroup='STEREO')\n\n\n\n\nCode\ndatasets = ['JUNO_HELIO1DAY_POSITION', 'EARTH_HELIO1DAY_POSITION', 'STA_HELIO1DAY_POSITION']\nnames = ['JUNO', 'EARTH', 'STA']\n\ntimerange = [\"2011-08-01\", \"2016-07-01\"]\n\n\n\n\nCode\ndfs = []\nfor dataset, name in zip(datasets, names):\n    data = get_data(dataset, timerange)\n    df = data.to_dataframe()\n    df = df.rename(columns={c: f\"{name}_{c}\" for c in df.columns})\n    dfs.append(df)\n\n\n2024-02-02 10:42:28.478 | INFO     | __main__:get_data:9 - RAD_AU\n2024-02-02 10:42:28.478 | INFO     | __main__:get_data:9 - SE_LAT\n2024-02-02 10:42:28.479 | INFO     | __main__:get_data:9 - SE_LON\n2024-02-02 10:42:28.479 | INFO     | __main__:get_data:9 - HG_LAT\n2024-02-02 10:42:28.479 | INFO     | __main__:get_data:9 - HG_LON\n2024-02-02 10:42:28.480 | INFO     | __main__:get_data:9 - HGI_LAT\n2024-02-02 10:42:28.480 | INFO     | __main__:get_data:9 - HGI_LON\n2024-02-02 10:42:29.565 | INFO     | __main__:get_data:9 - RAD_AU\n2024-02-02 10:42:29.566 | INFO     | __main__:get_data:9 - SE_LAT\n2024-02-02 10:42:29.566 | INFO     | __main__:get_data:9 - SE_LON\n2024-02-02 10:42:29.566 | INFO     | __main__:get_data:9 - HG_LAT\n2024-02-02 10:42:29.567 | INFO     | __main__:get_data:9 - HG_LON\n2024-02-02 10:42:29.567 | INFO     | __main__:get_data:9 - HGI_LAT\n2024-02-02 10:42:29.568 | INFO     | __main__:get_data:9 - HGI_LON\n2024-02-02 10:42:30.540 | INFO     | __main__:get_data:9 - RAD_AU\n2024-02-02 10:42:30.541 | INFO     | __main__:get_data:9 - SE_LAT\n2024-02-02 10:42:30.541 | INFO     | __main__:get_data:9 - SE_LON\n2024-02-02 10:42:30.542 | INFO     | __main__:get_data:9 - HG_LAT\n2024-02-02 10:42:30.542 | INFO     | __main__:get_data:9 - HG_LON\n2024-02-02 10:42:30.543 | INFO     | __main__:get_data:9 - HGI_LAT\n2024-02-02 10:42:30.544 | INFO     | __main__:get_data:9 - HGI_LON\n\n\n\n\nCode\ndf_concated = pd.concat(dfs, axis=1)\n\n\n\n\nCode\ndf = pl.DataFrame(df_concated.reset_index()).with_columns(\n    JUNO_EARTH_HGI_LON_diff = (pl.col(\"JUNO_HGI_LON\") - pl.col(\"EARTH_HGI_LON\")).abs(),\n    JUNO_STA_HGI_LON_diff = (pl.col(\"JUNO_HGI_LON\") - pl.col(\"STA_HGI_LON\")).abs(),\n    JUNO_EARTH_HG_LON_diff = (pl.col(\"JUNO_HG_LON\") - pl.col(\"EARTH_HG_LON\")).abs(),\n    JUNO_STA_HG_LON_diff = (pl.col(\"JUNO_HG_LON\") - pl.col(\"STA_HG_LON\")).abs(),\n).with_columns(\n    JUNO_EARTH_HG_LON_diff = pl.when(pl.col(\"JUNO_EARTH_HG_LON_diff\")&gt;180).then(360-pl.col(\"JUNO_EARTH_HG_LON_diff\")).otherwise(pl.col(\"JUNO_EARTH_HG_LON_diff\")),\n    JUNO_STA_HG_LON_diff = pl.when(pl.col(\"JUNO_STA_HG_LON_diff\")&gt;180).then(360-pl.col(\"JUNO_STA_HG_LON_diff\")).otherwise(pl.col(\"JUNO_STA_HG_LON_diff\")),\n)\n\n\n\n\nCode\nplot01 = df.plot(x=\"Epoch\", y=[\"JUNO_EARTH_HG_LON_diff\", \"JUNO_STA_HG_LON_diff\"]) \nplot02 = df.plot(x=\"Epoch\", y=[\"JUNO_EARTH_HGI_LON_diff\", \"JUNO_STA_HGI_LON_diff\"])\n\nplot01 + plot02\n\n\n\n\n\n\n  \n\n\n\n\n\n\nCode\ndf.plot(x=\"Epoch\", y=[\"JUNO_HGI_LON\", \"EARTH_HGI_LON\", \"STA_HGI_LON\"], kind=\"line\")",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  }
]