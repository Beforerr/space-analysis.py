[
  {
    "objectID": "examples/01_cdas.html",
    "href": "examples/01_cdas.html",
    "title": "CDAS Example Jupyter Notebook",
    "section": "",
    "text": "This Jupyter notebook demonstrates using cdas related rountine and the cdasws Python package, for accessing the Coordinate Data Analysis System (CDAS) web services",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#references",
    "href": "examples/01_cdas.html#references",
    "title": "CDAS Example Jupyter Notebook",
    "section": "References",
    "text": "References\n\nCDAS RESTful Web Services\n\nCdasWs Basic Example with Xarray\n\ncdasws API documentation\nFAQ\n\n\n\n\nImporting libraries\nfrom cdasws import CdasWs\nimport pandas as pd\nimport polars as pl\nfrom rich import print\nfrom great_tables import GT\n\n\n\n\nCode\ncdas = CdasWs()",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#get-observatory-groups-with-observatory-ids-identifiers",
    "href": "examples/01_cdas.html#get-observatory-groups-with-observatory-ids-identifiers",
    "title": "CDAS Example Jupyter Notebook",
    "section": "Get observatory groups with observatory ids (identifiers)",
    "text": "Get observatory groups with observatory ids (identifiers)\nThe following code demonstrates how to get the list of observatory groups with their respective observatory ids.\n\n\nCode\nobs_groups = cdas.get_observatory_groups()\n\n\n\n\nConvert to a DataFrame and display\nobs_groups_df = pl.DataFrame(obs_groups)\nGT(obs_groups_df.with_columns(pl.col(\"ObservatoryId\").list.join(\", \"))).tab_header(\n    title=\"CDAS Observatory Groups\",\n).cols_label(\n    ObservatoryId=\"Observatory Ids (list of identifiers for observatories that belong to this group)\"\n)\n\n\n\n\n\n\n\n\nCDAS Observatory Groups\n\n\n\n\nName\nObservatory Ids (list of identifiers for observatories that belong to this group)\n\n\n\n\nACE\nAC, ACE, OMNI (1AU IP Data)\n\n\nAIM\nAIM CIPS PMC SCI\n\n\nAMPTE\nAMPTE-CCE\n\n\nARTEMIS\nTHB, THC\n\n\nAlouette\nAlouette-2\n\n\nApollo\nALSEP\n\n\nArase (ERG)\n(null), Arase(ERG), ERG\n\n\nBalloons\nPMC Turbo, bar_1A, bar_1B, bar_1C, bar_1D, bar_1G, bar_1H, bar_1I, bar_1J, bar_1K, bar_1M, bar_1N, bar_1O, bar_1Q, bar_1R, bar_1S, bar_1T, bar_1U, bar_1V, bar_2A, bar_2B, bar_2C, bar_2D, bar_2E, bar_2F, bar_2I, bar_2K, bar_2L, bar_2M, bar_2N, bar_2O, bar_2P, bar_2Q, bar_2T, bar_2W, bar_2X, bar_2Y, bar_3A, bar_3B, bar_3C, bar_3D, bar_3E, bar_3F, bar_3G, bar_4A, bar_4B, bar_4C, bar_4D, bar_4E, bar_4F, bar_4G, bar_4H, bar_5A, bar_6A, bar_7A\n\n\nCNOFS\nCNOFS\n\n\nCRRES\nCRRES Satellite\n\n\nCassini\nCASSINI, Cassini\n\n\nCluster\nC1, C2, C3, C4, CL, CT\n\n\nDMSP\nDMSP, dmsp, dmsp-f13, dmsp-f16, dmsp-f17, dmsp-f18\n\n\nDSCOVR\nDSCOVR\n\n\nDynamics Explorer\nDE, DE-1, DE1\n\n\nEquator-S\nEQ\n\n\nFAST\nFAST\n\n\nFormosat\nFS-5, ROCSAT-1(FORMOSAT-1)\n\n\nGOES\nG0, G10, G12, GOES-08, GOES-09, GOES-10, GOES-11, GOES-12, GOES-13, GOES-14, GOES-15, GOES-16, GOES-17, GOES10, GOES11, GOES12, GOES13, GOES14, GOES15, GOES16, GOES17, GOES18, GOES8, GOES9, GOES_10, GOES_11, GOES_12, GOES_6, GOES_7, GOES_8, GOES_9, g11\n\n\nGOLD\nGOLD\n\n\nGPS\nGPS\n\n\nGenesis\nGenesis\n\n\nGeosynchronous Investigations\nSTPSat-6\n\n\nGeotail\nGEOTAIL\n\n\nGround-Based Investigations\nCANOPUS, DARN, FMI, SESAME, THG_L2\n\n\nHawkeye\nHK\n\n\nHelio Ephemeris\nBEPICOLOMBO, BORRELLY, COMETGS, COMETHMP, DAWN, EARTH, GALILEO, GIACOBINI, GIOTTO, HALEBOPP, HALLEY, HYAKUTAKE, JUNO, JUPITER, MARS, MERCURY, MSL, NEPTUNE, PHOBOS2, PLUTO, ROSETTA, SAKIGAKE, SATURN, SUISEI, URANUS, VENUS, WILD2\n\n\nHelios\nHELIOS, HELIOS-1, HELIOS-2, HELIOS1, HELIOS2, Helios-1, Helios-2\n\n\nIBEX\nIBEX\n\n\nICON\nICON, ICON\n\n\nIMAGE\nIM, IMAGE\n\n\nIMP (All)\nI8, IMP-8, IMP7, IMP8, OMNI (1AU IP Data)\n\n\nISEE\nISEE 1, ISEE-1, ISEE-3, ISEE1, ISEE2\n\n\nISIS\nISIS-1, ISIS-2\n\n\nISS\nISS\n\n\nInterball\nINTERBALL-AURORAL, INTERBALL-GROUND, INTERBALL-TAIL\n\n\nLANL\nL1, LANL-97A, LANL1989_046, LANL1990_095, LANL1991_080, LANL1994_084, Lanl-01A, Lanl-02A, Lanl-97A, Lanl1989_046, Lanl1990_095, Lanl1991_080, Lanl1994_084\n\n\nMAVEN\nMAVEN\n\n\nMESSENGER\nMESSENGER\n\n\nMMS\nMMS1, MMS2, MMS3, MMS4, mms1, mms2, mms3, mms4\n\n\nMariner\nMariner2\n\n\nMars Global Surveyor (MGS)\nMGS\n\n\nMars Science Laboratory (MSL)\nMSL\n\n\nNOAA\nMetOp1, MetOp2, MetOp3, NOAA05, NOAA07, NOAA08, NOAA10, NOAA12, NOAA14, NOAA15, NOAA16, NOAA18, NOAA19\n\n\nNew Horizons\nNEW_HORIZONS, NH\n\n\nOMNI (Combined 1AU IP Data; Magnetic and Solar Indices)\nOMNI (1AU IP Data)\n\n\nPOES/MetOp\nMetOp1, MetOp2, MetOp3, NOAA15, NOAA16, NOAA18, NOAA19\n\n\nParker Solar Probe (PSP)\nPSP, PSP_FLD\n\n\nPioneer\nPIONEER10, PIONEER11, Pioneer10, Pioneer11, Pioneer6, Pioneer7, PioneerVenus\n\n\nPolar\nPO, POLAR, Polar, po\n\n\nREACH\nreach\n\n\nSAMPEX\nSAMPEX\n\n\nSOHO\nSOHO\n\n\nST5\nST5\n\n\nSTEREO\nAhead, Behind, STA, STB, STEREO, STEREOA, STEREOB, sta, stb\n\n\nSmallsats/Cubesats\nCSSWE, Munin, SNOE, ac6a, ac6b, ela, elb\n\n\nSolar Orbiter\nSOLO, solo\n\n\nSounding Rockets\nDynamo-2, Endurance, RENU2, TOOWINDY\n\n\nTHEMIS\nTHA, THB, THC, THD, THE, THEMIS, THG, THG_L1, THG_L2\n\n\nTIMED\nTIMED\n\n\nTSS-1R\nTSS-1R\n\n\nTWINS\nTWINS-, TWINS1, TWINS2\n\n\nUlysses\nULYSSES, Ulysses\n\n\nVan Allen Probes (RBSP)\nRBSP, RBSP-A, RBSP-A-RBSPICE, RBSP-B, RBSP-B-RBSPICE, RBSPA, RBSPB, rbsp-a, rbsp-b, rbspa, rbspb\n\n\nVoyager\nVG1, VG2, VGR-1, VGR-2, VOYAGER1, VOYAGER2, Voyager1, Voyager2\n\n\nWind\nOMNI (1AU IP Data), WI, WIND, Wi, Wind, wi",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#get-intrument-types",
    "href": "examples/01_cdas.html#get-intrument-types",
    "title": "CDAS Example Jupyter Notebook",
    "section": "Get Intrument Types",
    "text": "Get Intrument Types\nThe following code demonstrates how to get the available instrument types.\n\n\nCode\ninstr_types = cdas.get_instrument_types()\nprint(instr_types)\n\n\n[\n    {'Name': 'Activity Indices'},\n    {'Name': 'Electric Fields (space)'},\n    {'Name': 'Electron Precipitation Bremsstrahlung'},\n    {'Name': 'Energetic Particle Detector'},\n    {'Name': 'Engineering'},\n    {'Name': 'Ephemeris/Attitude/Ancillary'},\n    {'Name': 'Gamma and X-Rays'},\n    {'Name': 'Ground-Based HF-Radars'},\n    {'Name': 'Ground-Based Imagers'},\n    {'Name': 'Ground-Based Magnetometers, Riometers, Sounders'},\n    {'Name': 'Ground-Based VLF/ELF/ULF, Photometers'},\n    {'Name': 'Housekeeping'},\n    {'Name': 'Imaging and Remote Sensing (ITM/Earth)'},\n    {'Name': 'Imaging and Remote Sensing (Magnetosphere/Earth)'},\n    {'Name': 'Imaging and Remote Sensing (Sun)'},\n    {'Name': 'Magnetic Fields (Balloon)'},\n    {'Name': 'Magnetic Fields (space)'},\n    {'Name': 'Particles (space)'},\n    {'Name': 'Plasma and Solar Wind'},\n    {'Name': 'Pressure gauge (space)'},\n    {'Name': 'Radio and Plasma Waves (space)'},\n    {'Name': 'Spacecraft Potential Control'},\n    {'Name': 'UV Imaging Spectrograph (Space)'}\n]",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#get-datasets",
    "href": "examples/01_cdas.html#get-datasets",
    "title": "CDAS Example Jupyter Notebook",
    "section": "Get Datasets",
    "text": "Get Datasets\nThe following code demontrates how to get a list of datasets.",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "examples/01_cdas.html#gets-descriptions-of-the-observatory-groups-and-associated-instruments-from-the-server.",
    "href": "examples/01_cdas.html#gets-descriptions-of-the-observatory-groups-and-associated-instruments-from-the-server.",
    "title": "CDAS Example Jupyter Notebook",
    "section": "Gets descriptions of the observatory groups (and associated instruments) from the server.",
    "text": "Gets descriptions of the observatory groups (and associated instruments) from the server.\n\n\nCode\nfrom beforerr.project import produce_or_load\n\n\n\n\nCode\nobs_groups_and_instrs, file = produce_or_load(\n    cdas.get_observatory_groups_and_instruments,\n    filename=\"obs_groups_and_instrs\",\n    suffix=\"json\",\n)\n\n\n\n\nConvert to a DataFrame and display it beautifully\n# Existing code to prepare the rows remains unchanged\nrows = []\nfor observatory in obs_groups_and_instrs:\n    for instrument_group in observatory[\"ObservatoryInstruments\"]:\n        for instrument in instrument_group[\"InstrumentDescription\"]:\n            rows.append(\n                {\n                    \"Observatory\": observatory[\"Name\"],\n                    \"Instrument Group\": instrument_group[\"Name\"],\n                    \"Instrument Name\": instrument[\"Name\"],\n                    \"Short Description\": instrument[\"ShortDescription\"],\n                    \"Long Description\": instrument[\"LongDescription\"],\n                }\n            )\n\n# Convert to DataFrame\nobs_groups_instrs_df = pd.DataFrame(rows)\n\n# Step 2: Adjust Column Multi-Index Creation\nindex_columns = [\"Observatory\", \"Instrument Group\", \"Instrument Name\"]\nindex = pd.MultiIndex.from_frame(obs_groups_instrs_df[index_columns])\nobs_groups_instrs_df.drop(columns=index_columns).set_index(index)\n\n\n\n\n\n\n\n\n\n\n\nShort Description\nLong Description\n\n\nObservatory\nInstrument Group\nInstrument Name\n\n\n\n\n\n\nACE\nAC\nCRIS\nACE Cosmic Ray Isotope Spectrometer\nACE Cosmic Ray Isotope Spectrometer\n\n\nDEF\nDefinitive Data\nDefinitive Data\n\n\nEPAM\nACE Electron Proton Alpha Monitor\nACE Electron Proton Alpha Monitor\n\n\nEPM\nACE Electron, Proton, and Alpha Monitor\nACE Electron, Proton, and Alpha Monitor\n\n\nGIFWALK\n\n\n\n\n...\n...\n...\n...\n...\n\n\nWind\nWIND\ndirectional-diff-h-flux-10min\ndirectional differential h fluxes 10min\ndirectional differential h fluxes 10min\n\n\ndirectional-diff-he-flux-10min\ndirectional differential he fluxes 10min\ndirectional differential he fluxes 10min\n\n\nWi\n3DP\nThree Dimensional Plasma Instrument Suite\nThree Dimensional Plasma Instrument Suite\n\n\nWind\n3DP\nThree Dimensional Plasma Instrument Suite\nThree Dimensional Plasma Instrument Suite\n\n\nwi\nSWE-Faraday\nSolar Wind Experiment Faraday Cup\nSolar Wind Experiment Faraday Cup\n\n\n\n\n2075 rows × 2 columns\n\n\n\n\n\nCode\n# Display it beautifully\nGT(\n    obs_groups_instrs_df.head(30),\n    rowname_col=\"Instrument Group\",\n    groupname_col=\"Observatory\",\n).tab_header(\n    title=\"CDAS Observatory Groups and Instruments\",\n)\n\n\n\n\n\n\n\n\nCDAS Observatory Groups and Instruments\n\n\n\n\n\nInstrument Name\nShort Description\nLong Description\n\n\n\n\nACE\n\n\nAC\nCRIS\nACE Cosmic Ray Isotope Spectrometer\nACE Cosmic Ray Isotope Spectrometer\n\n\nAC\nDEF\nDefinitive Data\nDefinitive Data\n\n\nAC\nEPAM\nACE Electron Proton Alpha Monitor\nACE Electron Proton Alpha Monitor\n\n\nAC\nEPM\nACE Electron, Proton, and Alpha Monitor\nACE Electron, Proton, and Alpha Monitor\n\n\nAC\nGIFWALK\n\n\n\n\nAC\nMAG\nACE Magnetic Field Instrument\nACE Magnetic Field Instrument\n\n\nAC\nMFI\nACE Magnetic Field Instrument\nACE Magnetic Field Instrument\n\n\nAC\nSEPICA\nThe Solar Energetic Particle Ionic Charge Analyzer\nThe Solar Energetic Particle Ionic Charge Analyzer\n\n\nAC\nSIS\nACE Solar Isotope Spectrometer\nACE Solar Isotope Spectrometer\n\n\nAC\nSWE\nACE Solar Wind Electron Proton Alpha Monitor\nACE Solar Wind Electron Proton Alpha Monitor\n\n\nAC\nSWEP\nACE Solar Wind Electron Proton Alpha Monitor\nACE Solar Wind Electron Proton Alpha Monitor\n\n\nAC\nSWICS\nSolar Wind Ion Composition Spectrometer\nSolar Wind Ion Composition Spectrometer\n\n\nAC\nSWICS_1.1\nSolar Wind Ion Composition Spectrometer 1.1\nSolar Wind Ion Composition Spectrometer 1.1\n\n\nAC\nSWICS_2.0\nSolar Wind Ion Composition Spectrometer 2.0\nSolar Wind Ion Composition Spectrometer 2.0\n\n\nAC\nULEIS\nUltra Low Energy Isotope Spectrometer\nUltra Low Energy Isotope Spectrometer\n\n\nACE\nSSC\nSatellite Situation Center Ephemeris\nSatellite Situation Center Ephemeris\n\n\nOMNI (1AU IP Data)\nIMF and Plasma data\nIMF and Plasma data\nIMF and Plasma data\n\n\nOMNI (1AU IP Data)\nIMF, Plasma, Indices, Energetic Proton Flux\nIMF, Plasma, Indices, Energetic Proton Flux\nIMF, Plasma, Indices, Energetic Proton Flux\n\n\nOMNI (1AU IP Data)\nmerged magnetic field and plasma data from cohoweb\nmerged magnetic field and plasma data from cohoweb\nmerged magnetic field and plasma data from cohoweb\n\n\nAIM\n\n\nAIM CIPS PMC SCI\nCIPS\nCloud Imaging and Particle Size\nCloud Imaging and Particle Size\n\n\nAMPTE\n\n\nAMPTE-CCE\nEPI\nEnergetic Particles\nEnergetic Particles\n\n\nARTEMIS\n\n\nTHB\nL1\nL1 DATA\nL1 DATA\n\n\nTHB\nL2\nL2 DATA\nL2 DATA\n\n\nTHB\nSSC\nSSC data\nSSC data\n\n\nTHB\nposition\nsc positions\nsc positions\n\n\nTHC\nL1\nL1 DATA\nL1 DATA\n\n\nTHC\nL2\nL2 DATA\nL2 DATA\n\n\nTHC\nSSC\nSSC data\nSSC data\n\n\nTHC\nposition\nsc positions\nsc positions\n\n\nAlouette\n\n\nAlouette-2\nLIM\nLima\nLima\n\n\n\n\n\n\n        \n\n\n\n\nCode\nfrom space_analysis.utils.cdas import get_data\n\n\n\n\nCode\ndatasets = [\n    \"JUNO_HELIO1DAY_POSITION\",\n    \"EARTH_HELIO1DAY_POSITION\",\n    \"STA_HELIO1DAY_POSITION\",\n]\nnames = [\"JUNO\", \"EARTH\", \"STA\"]\n\ntimerange = [\"2011-08-01\", \"2016-07-01\"]\n\n\n\n\nCode\ndfs = []\nfor dataset, name in zip(datasets, names):\n    data = get_data(dataset, timerange)\n    df = data.to_dataframe()\n    df = df.rename(columns={c: f\"{name}_{c}\" for c in df.columns})\n    dfs.append(df)\n\npd.concat(dfs, axis=1)\n\n\n2024-06-04 13:27:40.742 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - RAD_AU\n2024-06-04 13:27:40.742 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - SE_LAT\n2024-06-04 13:27:40.743 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - SE_LON\n2024-06-04 13:27:40.743 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HG_LAT\n2024-06-04 13:27:40.743 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HG_LON\n2024-06-04 13:27:40.743 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HGI_LAT\n2024-06-04 13:27:40.744 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HGI_LON\n2024-06-04 13:27:41.389 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - RAD_AU\n2024-06-04 13:27:41.389 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - SE_LAT\n2024-06-04 13:27:41.390 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - SE_LON\n2024-06-04 13:27:41.390 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HG_LAT\n2024-06-04 13:27:41.390 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HG_LON\n2024-06-04 13:27:41.390 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HGI_LAT\n2024-06-04 13:27:41.391 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HGI_LON\n2024-06-04 13:27:42.070 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - RAD_AU\n2024-06-04 13:27:42.070 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - SE_LAT\n2024-06-04 13:27:42.071 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - SE_LON\n2024-06-04 13:27:42.071 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HG_LAT\n2024-06-04 13:27:42.071 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HG_LON\n2024-06-04 13:27:42.072 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HGI_LAT\n2024-06-04 13:27:42.072 | INFO     | space_analysis.utils.cdas:get_dataset_variables:25 - HGI_LON\n\n\n\n\n\n\n\n\n\nJUNO_RAD_AU\nJUNO_SE_LAT\nJUNO_SE_LON\nJUNO_HG_LAT\nJUNO_HG_LON\nJUNO_HGI_LAT\nJUNO_HGI_LON\nEARTH_RAD_AU\nEARTH_SE_LAT\nEARTH_SE_LON\n...\nEARTH_HG_LON\nEARTH_HGI_LAT\nEARTH_HGI_LON\nSTA_RAD_AU\nSTA_SE_LAT\nSTA_SE_LON\nSTA_HG_LAT\nSTA_HG_LON\nSTA_HGI_LAT\nSTA_HGI_LON\n\n\nEpoch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2011-08-02\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.01\n0.0\n309.399994\n...\n323.100006\n5.8\n233.199997\n0.96\n0.0\n49.500000\n3.2\n63.599998\n3.2\n333.700012\n\n\n2011-08-03\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.01\n0.0\n310.299988\n...\n309.899994\n5.9\n234.199997\n0.96\n0.0\n50.500000\n3.1\n50.500000\n3.1\n334.799988\n\n\n2011-08-04\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.01\n0.0\n311.299988\n...\n296.700012\n6.0\n235.199997\n0.96\n0.0\n51.599998\n2.9\n37.400002\n2.9\n335.799988\n\n\n2011-08-05\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.01\n0.0\n312.299988\n...\n283.500000\n6.0\n236.100006\n0.96\n0.0\n52.599998\n2.8\n24.200001\n2.8\n336.899994\n\n\n2011-08-06\n1.01\n0.0\n313.299988\n6.1\n270.299988\n6.1\n237.199997\n1.01\n0.0\n313.200012\n...\n270.299988\n6.1\n237.100006\n0.96\n0.0\n53.700001\n2.7\n11.100000\n2.7\n337.899994\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2016-06-27\n5.44\n1.4\n177.199997\n-5.7\n346.899994\n-5.7\n101.300003\n1.02\n0.0\n275.799988\n...\n85.300003\n2.5\n199.600006\n0.97\n-0.1\n120.199997\n-5.2\n289.600006\n-5.2\n44.000000\n\n\n2016-06-28\n5.44\n1.4\n177.199997\n-5.7\n332.799988\n-5.7\n101.300003\n1.02\n0.0\n276.700012\n...\n72.000000\n2.6\n200.600006\n0.97\n-0.1\n121.300003\n-5.3\n276.500000\n-5.3\n45.000000\n\n\n2016-06-29\n5.44\n1.4\n177.300003\n-5.7\n318.600006\n-5.7\n101.300003\n1.02\n0.0\n277.700012\n...\n58.799999\n2.7\n201.500000\n0.97\n-0.1\n122.300003\n-5.4\n263.299988\n-5.4\n46.099998\n\n\n2016-06-30\n5.44\n1.3\n177.300003\n-5.7\n304.399994\n-5.7\n101.400002\n1.02\n0.0\n278.600006\n...\n45.599998\n2.8\n202.500000\n0.97\n-0.1\n123.300003\n-5.4\n250.199997\n-5.4\n47.099998\n\n\n2016-07-01\n5.44\n1.3\n177.300003\n-5.8\n290.299988\n-5.8\n101.400002\n1.02\n0.0\n279.600006\n...\n32.299999\n2.9\n203.399994\n0.97\n-0.1\n124.400002\n-5.5\n237.000000\n-5.5\n48.099998\n\n\n\n\n1796 rows × 21 columns",
    "crumbs": [
      "Home",
      "Examples",
      "CDAS Example Jupyter Notebook"
    ]
  },
  {
    "objectID": "simulation/warpx.html",
    "href": "simulation/warpx.html",
    "title": "WarpX",
    "section": "",
    "text": "CustomSimulation\n\n CustomSimulation (dim:int=None, diag:bool=True, test:bool=True,\n                   n0:float=None, m_ion_norm:float=1836.152,\n                   m_ion:float=None, v_ti:float=None, nz:int=None,\n                   nx:int=None, nppc:int=64, time_norm:float=100.0,\n                   dt_norm:float=0.00390625, diag_time_norm:float=1,\n                   diag_steps:int=None, diag_part:bool=False,\n                   diag_field:bool=True,\n                   diag_format:Literal['plotfile','openpmd']='plotfile',\n                   diag_openpmd_backend:Literal['h5','bp','json']='h5',\n                   diag_field_list:list=['E', 'B', 'J', 'J_displacement',\n                   'rho'], diag_part_list:list=None, restart:bool=False,\n                   grid_kwargs:dict={}, warpx_kwargs:dict={},\n                   **extra_data:Any)\n\n*Usage docs: https://docs.pydantic.dev/2.7/concepts/models/\nA base class for creating Pydantic models.\nAttributes:\nclass_vars: The names of classvars defined on the model.\nprivate_attributes: Metadata about the private attributes of the model.\nsignature: The signature for instantiating the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.*\n\n\n\nlog_sim_info\n\n log_sim_info (sim:pywarpx.picmi.Simulation)\n\nprint out plasma parameters and numerical parameters.\nThe Courant-Friedrichs–Lewy (CFL) condition for Whistler waves on the time step is typically \\(\\Omega_{ci} \\Delta t &lt; (\\Delta x / d_i)^2 / \\pi\\) (where \\(d_i= c/\\omega_{pi}\\) is the ion skin depth).\n\nI usually check that \\(\\Omega_{ci}d_i \\Delta t = v_A \\Delta t &lt; \\Delta x\\) as a CFL-like condition (where is the Alfven speed) and keep \\(\\Delta x &lt; d_i\\). In cases where super-Alfvenic ions exist it is also good to ensure that \\(v_{max}\\Delta t &lt; \\Delta x\\) as a “particle CFL-like” condition. See comment\n\n\n\n\nHybridSimulation\n\n HybridSimulation (dim:int=None, diag:bool=True, test:bool=True,\n                   n0:float=None, m_ion_norm:float=1836.152,\n                   m_ion:float=None, v_ti:float=None, nz:int=None,\n                   nx:int=None, nppc:int=64, time_norm:float=100.0,\n                   dt_norm:float=0.00390625, diag_time_norm:float=1,\n                   diag_steps:int=None, diag_part:bool=False,\n                   diag_field:bool=True,\n                   diag_format:Literal['plotfile','openpmd']='plotfile',\n                   diag_openpmd_backend:Literal['h5','bp','json']='h5',\n                   diag_field_list:list=['E', 'B', 'J', 'J_displacement',\n                   'rho'], diag_part_list:list=None, restart:bool=False,\n                   grid_kwargs:dict={}, warpx_kwargs:dict={},\n                   beta:float=0.1, B0:float=1.0000000000000001e-07,\n                   vA:float=None, vA_over_c:float=None,\n                   n_floor_coef:float=0.015625,\n                   plasma_resistivity:float=1e-06,\n                   plasma_hyper_resistivity:float=1e-06, substeps:int=10,\n                   T_plasma:float=None, Te:float=None, Te_norm:float=1,\n                   t_ci:float=None, d_i:float=None, Lz_norm:float=None,\n                   Lx_norm:float=0, dz_norm:float=0.25, **extra_data:Any)\n\n*Usage docs: https://docs.pydantic.dev/2.7/concepts/models/\nA base class for creating Pydantic models.\nAttributes:\nclass_vars: The names of classvars defined on the model.\nprivate_attributes: Metadata about the private attributes of the model.\nsignature: The signature for instantiating the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.*\n\n\n\nlog_info\n\n log_info (sim:__main__.HybridSimulation)\n\nprint out plasma parameters and numerical parameters.",
    "crumbs": [
      "Home",
      "Simulation",
      "WarpX"
    ]
  },
  {
    "objectID": "io/30_cdf.html",
    "href": "io/30_cdf.html",
    "title": "Common Data Format (CDF)",
    "section": "",
    "text": "CDF Home Page\nCDFpp : A modern C++ header only cdf library with Python bindings\n\n\n\n\ninspect_cdf\n\n inspect_cdf (file_path:str,\n              var_type:Literal['data','metadata','support_data','ignore_da\n              ta']='data')\n\n\n\n\ncdf2pl\n\n cdf2pl (file_path:str, var_names:str|list[str])\n\nConvert a CDF file to Polars Dataframe.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfile_path\nstr\nThe path to the CDF file.\n\n\nvar_names\nstr | list[str]\n\n\n\nReturns\nLazyFrame\nA lazy dataframe containing the requested data.\n\n\n\n\nfrom nbdev import nbdev_export\n\nnbdev_export()",
    "crumbs": [
      "Home",
      "IO",
      "Common Data Format (CDF)"
    ]
  },
  {
    "objectID": "00_core.html#variable",
    "href": "00_core.html#variable",
    "title": "Core",
    "section": "Variable",
    "text": "Variable\n\n\nVariables\n\n Variables (timerange:list[datetime.datetime]=None,\n            variables:dict[str,__main__.Variable]=None)\n\n\n\n\nVariable\n\n Variable (name:str=None, description:str=None, unit:str=None,\n           timerange:list[datetime.datetime]=None)",
    "crumbs": [
      "Home",
      "Core"
    ]
  },
  {
    "objectID": "00_core.html#dataset",
    "href": "00_core.html#dataset",
    "title": "Core",
    "section": "Dataset",
    "text": "Dataset\n\n\nDataset\n\n Dataset (timerange:list[datetime.datetime]=None,\n          variables:dict[str,__main__.Variable]=None, name:str=None)",
    "crumbs": [
      "Home",
      "Core"
    ]
  },
  {
    "objectID": "00_core.html#instrument-and-mission",
    "href": "00_core.html#instrument-and-mission",
    "title": "Core",
    "section": "Instrument and Mission",
    "text": "Instrument and Mission\n\n\nMission\n\n Mission (name:str, instruments:dict[str,__main__.Instrument]=&lt;function\n          normalize&gt;, datasets:dict[str,__main__.Dataset]=None,\n          names_list:list[str]=None)\n\n\n\n\nInstrument\n\n Instrument (name:str, datasets:dict[str,__main__.Dataset]=&lt;function\n             normalize&gt;, names_list:list[str]=None)",
    "crumbs": [
      "Home",
      "Core"
    ]
  },
  {
    "objectID": "plot/01_plt_config.html",
    "href": "plot/01_plt_config.html",
    "title": "space-analysis.py",
    "section": "",
    "text": "FigureExtraOptions\n\n FigureExtraOptions (hide_legends:bool=False, hide_ylabels:bool=False,\n                     sync_legend_colors:bool=False,\n                     hide_legend_lines:bool=False)\n\nOptions to apply to a matplotlib figure.",
    "crumbs": [
      "Home",
      "Plot",
      "01 Plt Config"
    ]
  },
  {
    "objectID": "utils/00_basic.html",
    "href": "utils/00_basic.html",
    "title": "Basic utils",
    "section": "",
    "text": "resample\n\n resample\n           (df:polars.lazyframe.frame.LazyFrame|polars.dataframe.frame.Dat\n           aFrame, every:datetime.timedelta,\n           period:datetime.timedelta=None, offset:datetime.timedelta=None,\n           shift:datetime.timedelta=None, time_column='time')\n\nResample the DataFrame",
    "crumbs": [
      "Home",
      "Utils",
      "Basic utils"
    ]
  },
  {
    "objectID": "utils/20_pds.html",
    "href": "utils/20_pds.html",
    "title": "Planetary Data System (PDS)",
    "section": "",
    "text": "Planetary Data System\n\nPDS Planetary Plasma Interactions Node\nPDS Geosciences Node\nPDS Imaging Node\nPDS Atmospheres Node\nPDS Small Bodies Node\nPDS Ring-Moon Systems Node\nPDS Cartography and Imaging Sciences Node\nPDS Planetary Rings Node\n\nPlanetaryPy and Michael Aye’s Library",
    "crumbs": [
      "Home",
      "Utils",
      "Planetary Data System (PDS)"
    ]
  },
  {
    "objectID": "utils/20_pds.html#references",
    "href": "utils/20_pds.html#references",
    "title": "Planetary Data System (PDS)",
    "section": "",
    "text": "Planetary Data System\n\nPDS Planetary Plasma Interactions Node\nPDS Geosciences Node\nPDS Imaging Node\nPDS Atmospheres Node\nPDS Small Bodies Node\nPDS Ring-Moon Systems Node\nPDS Cartography and Imaging Sciences Node\nPDS Planetary Rings Node\n\nPlanetaryPy and Michael Aye’s Library",
    "crumbs": [
      "Home",
      "Utils",
      "Planetary Data System (PDS)"
    ]
  },
  {
    "objectID": "utils/20_pds.html#pds-planetary-plasma-interactions-node",
    "href": "utils/20_pds.html#pds-planetary-plasma-interactions-node",
    "title": "Planetary Data System (PDS)",
    "section": "PDS Planetary Plasma Interactions Node",
    "text": "PDS Planetary Plasma Interactions Node\nSee configuration\n\n\npds_download\n\n pds_download (mission, instrument, dataset, coord, datatype, path,\n               phase_url, sat=None, pds_url='https://pds-\n               ppi.igpp.ucla.edu/ditdos/download?id=pds://PPI')\n\nDownloading file from PDS server\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmission\n\n\nplanetary missions\n\n\ninstrument\n\n\n\n\n\ndataset\n\n\nDataset may correspond to a phase of the mission\n\n\ncoord\n\n\n\n\n\ndatatype\n\n\n\n\n\npath\n\n\n\n\n\nphase_url\n\n\n\n\n\nsat\nNoneType\nNone\nsatellite name, for missions with multiple satellites\n\n\npds_url\nstr\nhttps://pds-ppi.igpp.ucla.edu/ditdos/download?id=pds://PPI\n\n\n\nReturns\nlist",
    "crumbs": [
      "Home",
      "Utils",
      "Planetary Data System (PDS)"
    ]
  },
  {
    "objectID": "utils/21_cdas.html",
    "href": "utils/21_cdas.html",
    "title": "CDAS",
    "section": "",
    "text": "Package for accessing the Coordinate Data Analysis System (CDAS) https://cdaweb.gsfc.nasa.gov web services.\nFor example, see notebook.\n\n\n\nget_data\n\n get_data (dataset, timerange, variables:list=None)\n\n\n\n\nget_dataset_variables\n\n get_dataset_variables (dataset:str)\n\n\n\n\nVariables\n\n Variables (timerange:list[datetime.datetime]=None,\n            variables:dict[str,space_analysis.core.Variable]=None)",
    "crumbs": [
      "Home",
      "Utils",
      "CDAS"
    ]
  },
  {
    "objectID": "data_structure/00_meta.html",
    "href": "data_structure/00_meta.html",
    "title": "space-analysis.py",
    "section": "",
    "text": "TempMeta\n\n TempMeta (dataset:str=None, parameters:list[str]=None)\n\n\n\n\nPlasmaMeta\n\n PlasmaMeta (dataset:str=None, parameters:list[str]=None)\n\n\n\n\nMeta\n\n Meta (dataset:str=None, parameters:list[str]=None)\n\n\nclass InstrumentConfig:\n    default_datatype: str\n    default_var_names: list[str]",
    "crumbs": [
      "Home",
      "Data Structure",
      "00 Meta"
    ]
  },
  {
    "objectID": "data_structure/01_tplot.html",
    "href": "data_structure/01_tplot.html",
    "title": "space-analysis.py",
    "section": "",
    "text": "export2csv\n\n export2csv (tvars:list, path)\n\n\n\n\nProcessConfig\n\n ProcessConfig (tvar:str=None, trans:list[__main__.TransformOp]=[])\n\n*Usage docs: https://docs.pydantic.dev/2.7/concepts/models/\nA base class for creating Pydantic models.\nAttributes:\nclass_vars: The names of classvars defined on the model.\nprivate_attributes: Metadata about the private attributes of the model.\nsignature: The signature for instantiating the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.*\n\n\n\nTransformOp\n\n TransformOp (name:str, transform_func:Callable[[str],str]=None,\n              **extra_data:Any)\n\nTransformation operation\n\n\n\nmagnitude_join\n\n magnitude_join (tvar:str)\n\n\n\n\nmva\n\n mva (tvar:str, prefix='B')\n\n\n\n\nmagnitude\n\n magnitude (tvar:str)\n\n\n\n\nGraphicalConfig\n\n GraphicalConfig (ylabel:str=None)\n\n*Usage docs: https://docs.pydantic.dev/2.7/concepts/models/\nA base class for creating Pydantic models.\nAttributes:\nclass_vars: The names of classvars defined on the model.\nprivate_attributes: Metadata about the private attributes of the model.\nsignature: The signature for instantiating the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.*\n\n\n\nTplotConfig\n\n TplotConfig (tvar:str=None, trans:list[str]=None)\n\n*Usage docs: https://docs.pydantic.dev/2.7/concepts/models/\nA base class for creating Pydantic models.\nAttributes:\nclass_vars: The names of classvars defined on the model.\nprivate_attributes: Metadata about the private attributes of the model.\nsignature: The signature for instantiating the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.*\n\n\n\nexport\n\n export (tvars2plot:list, config:space_analysis.ds.config.Config,\n         plot_kwargs:dict=None, **kwargs)\n\n\n\n\nplot\n\n plot (tvars2plot:list[str], config:space_analysis.ds.config.Config,\n       fig:matplotlib.figure.Figure=None,\n       axes:list[matplotlib.axes._axes.Axes]=None, **kwargs)\n\n\n\n\nupdate_panel\n\n update_panel (ax:matplotlib.axes._axes.Axes,\n               config:space_analysis.ds.config.PanelConfig)\n\n\n\n\nprocess\n\n process (tvar:str|list[str], config:__main__.ProcessConfig)\n\n\n\n\nprocess_panel\n\n process_panel (config:space_analysis.ds.config.PanelConfig,\n                process_func=&lt;function process&gt;, load_func=&lt;function\n                load_data&gt;, update_func=&lt;function update_tvar&gt;)\n\n\n\n\nupdate_tvar\n\n update_tvar (tvar, config:space_analysis.ds.config.PanelConfig)\n\n\n\n\nload_data\n\n load_data (config:space_analysis.ds.config.PanelConfig, load_func=None)",
    "crumbs": [
      "Home",
      "Data Structure",
      "01 Tplot"
    ]
  },
  {
    "objectID": "missions/wind/mag.html",
    "href": "missions/wind/mag.html",
    "title": "Magnetic field",
    "section": "",
    "text": "download_data\n\n download_data (**kwargs)\n\n\n\n\nload_data\n\n load_data (var_names='psp_fld_l2_mag_RTN', **kwargs)",
    "crumbs": [
      "Home",
      "Missions",
      "Wind mission",
      "Magnetic field"
    ]
  },
  {
    "objectID": "missions/wind/index.html",
    "href": "missions/wind/index.html",
    "title": "Wind mission",
    "section": "",
    "text": "See following notebooks for details:\n\nMagnetic field data",
    "crumbs": [
      "Home",
      "Missions",
      "Wind mission"
    ]
  },
  {
    "objectID": "missions/2018_psp.html",
    "href": "missions/2018_psp.html",
    "title": "Parker Solar Probe (PSP)",
    "section": "",
    "text": "validate\n\n validate (instrument, datatype=None, var_names=None, **kwargs)\n\nvalidate the input arguments and return the correct ones\n\nimport polars as pl\nimport pyspedas\n\nfrom functools import partial\nfrom space_analysis.io.cdf import cdf2pl\nfrom typing import overload\n\n\ndef download_data(**kwargs):\n    return pyspedas.psp.load(downloadonly=True, **kwargs)\n\n\n@overload\ndef load(\n    instrument: Literal[\"fields\"],\n    var_names: list[MagDataVars],\n    datatype: Literal[\"mag_rtn\"],\n    level: Literal[\"l2\"],\n    **kwargs,\n): ...\n\n\n@overload\ndef load(\n    instrument: Literal[\"spi\"],\n    var_names: list[SPIDataVars],\n    datatype: Literal[\"sf00_l3_mom\"],\n    level: Literal[\"l3\"],\n    **kwargs,\n): ...\n\n\ndef load(instrument=\"fields\", var_names=None, datatype=None, **kwargs) -&gt; pl.LazyFrame:\n    var_names, datatype = validate(instrument, datatype, var_names, **kwargs)\n\n    files = download_data(instrument=instrument, datatype=datatype, **kwargs)\n\n    load_func = partial(cdf2pl, var_names=var_names)\n\n    return pl.concat(load_func(file) for file in files)",
    "crumbs": [
      "Home",
      "Missions",
      "Parker Solar Probe (PSP)"
    ]
  },
  {
    "objectID": "plasma/01_mhd_waves.html",
    "href": "plasma/01_mhd_waves.html",
    "title": "space-analysis.py",
    "section": "",
    "text": "See plasmapy.dispersion.analytical.mhd_waves_ — PlasmaPy documentation\n\n\n\nVpVg_fs\n\n VpVg_fs (cs, ca, theta=None)\n\nCalculates the phase velocities and group velocities for fast and slow waves.",
    "crumbs": [
      "Home",
      "Plasma",
      "01 Mhd Waves"
    ]
  },
  {
    "objectID": "plasma/00_formulary.html",
    "href": "plasma/00_formulary.html",
    "title": "Theoretical formulas for space plasma physics",
    "section": "",
    "text": "default units are SI units for space plasma physics\n\nB : magnetic field, nT\nn : number density, cm^-3\nT : temperature, eV\n\nReference\n\nplasmapy.formulary provides theoretical formulas for calculation of physical quantities helpful for plasma physics.\n\n\n\n\ndf_beta\n\n df_beta (df:polars.dataframe.frame.DataFrame, T:str='T', n:str='n',\n          B:str='B', col_name:str='beta',\n          T_unit:astropy.units.core.Unit=Unit(\"eV\"),\n          n_unit:astropy.units.core.Unit=Unit(\"1 / cm3\"),\n          B_unit:astropy.units.core.Unit=Unit(\"nT\"))\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\nDataFrame\n\n\n\n\nT\nstr\nT\ntemperature of the plasma\n\n\nn\nstr\nn\nparticle density of the plasma\n\n\nB\nstr\nB\nmagnetic field in the plasma,\n\n\ncol_name\nstr\nbeta\n\n\n\nT_unit\nUnit\neV\n\n\n\nn_unit\nUnit\n1 / cm3\n\n\n\nB_unit\nUnit\nnT\n\n\n\nReturns\nDataFrame\n\n\n\n\n\n\n\n\nldf_Alfven_speed\n\n ldf_Alfven_speed (ldf:polars.lazyframe.frame.LazyFrame, **kwargs)\n\n\n\n\ndf_Alfven_speed\n\n df_Alfven_speed (df:polars.dataframe.frame.DataFrame, B:str='B',\n                  n:str='n', ion:Union[str,int,numpy.integer,plasmapy.part\n                  icles.particle_class.Particle,plasmapy.particles.particl\n                  e_class.CustomParticle,astropy.units.quantity.Quantity]=\n                  'p+', col_name='Alfven_speed', sign=True,\n                  B_unit:astropy.units.core.Unit=Unit(\"nT\"),\n                  n_unit:astropy.units.core.Unit=Unit(\"1 / cm3\"),\n                  speed_unit:astropy.units.core.Unit=Unit(\"km / s\"))\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\nDataFrame\n\n\n\n\nB\nstr\nB\nmagnetic field in the plasma, could be a component, as plasmapy will take abs of it\n\n\nn\nstr\nn\nparticle density of the plasma\n\n\nion\nUnion\np+\n\n\n\ncol_name\nstr\nAlfven_speed\n\n\n\nsign\nbool\nTrue\n\n\n\nB_unit\nUnit\nnT\n\n\n\nn_unit\nUnit\n1 / cm3\n\n\n\nspeed_unit\nUnit\nkm / s\n\n\n\n\n\n\n\ndf_thermal_spd2temp\n\n df_thermal_spd2temp (df:polars.lazyframe.frame.LazyFrame, speed_col,\n                      speed_unit=Unit(\"km / s\"))\n\n\n\n\nthermal_spd2temp\n\n thermal_spd2temp (speed, speed_unit=Unit(\"km / s\"))",
    "crumbs": [
      "Home",
      "Plasma",
      "Theoretical formulas for space plasma physics"
    ]
  },
  {
    "objectID": "missions/2015_dscovr.html",
    "href": "missions/2015_dscovr.html",
    "title": "Deep Space Climate Observatory (DSCOVR)",
    "section": "",
    "text": "The routines in this module can be used to load data from the Deep Space Climate Observatory (DSCOVR) mission.",
    "crumbs": [
      "Home",
      "Missions",
      "Deep Space Climate Observatory (DSCOVR)"
    ]
  },
  {
    "objectID": "missions/2015_dscovr.html#instruments",
    "href": "missions/2015_dscovr.html#instruments",
    "title": "Deep Space Climate Observatory (DSCOVR)",
    "section": "Instruments",
    "text": "Instruments\n\nMagnetometer\nFaraday cup\n\n\n\nimport pyspedas\nimport polars as pl\nfrom functools import partial\nfrom typing import Literal, overload\nfrom space_analysis.io.cdf import cdf2pl\n\n\ndef download_data(**kwargs):\n    return pyspedas.dscovr.load(downloadonly=True, **kwargs)\n\n\n@overload\ndef load_data(\n    instrument: Literal[\"mag\"],\n    var_names: list[MagDataVars],\n    datatype: Literal[\"h0\"],\n    **kwargs,\n): ...\n\n\n@overload\ndef load_data(\n    instrument: Literal[\"faraday_cup\"],\n    var_names: list[PlasmaDataVars],\n    datatype: Literal[\"h1\"],\n    **kwargs,\n): ...\n\n\ndef load_data(\n    instrument=\"mag\", var_names=None, datatype=None, **kwargs\n) -&gt; pl.LazyFrame:\n    if instrument == \"mag\":\n        var_names = var_names or [\"B1F1\", \"B1RTN\"]\n        datatype = datatype or \"h0\"\n    elif instrument == \"faraday_cup\":\n        var_names = var_names or [\"Np\", \"V_GSE\", \"THERMAL_TEMP\"]\n        datatype = datatype or \"h1\"\n\n    files = download_data(instrument=instrument, datatype=datatype, **kwargs)\n\n    load_func = partial(cdf2pl, var_names=var_names)\n\n    return pl.concat(load_func(file) for file in files)",
    "crumbs": [
      "Home",
      "Missions",
      "Deep Space Climate Observatory (DSCOVR)"
    ]
  },
  {
    "objectID": "missions/index.html",
    "href": "missions/index.html",
    "title": "Missions",
    "section": "",
    "text": "This module includes helpful functions for working with mission (magnetic field and plasma) data. We currently support the following missions:\n\nParker Solar Probe\nJuno\nWind\nTHEMIS/ARTEMIS\nSTEREO\n\n\nReferences\n\nPySPEDAS: Python-based Space Physics Environment Data Analysis Software\nspeasy: A simple Python package to deal with main Space Physics WebServices (CDA,SSC,AMDA,..)\n[planetarypy]",
    "crumbs": [
      "Home",
      "Missions"
    ]
  },
  {
    "objectID": "missions/wind/plasma.html",
    "href": "missions/wind/plasma.html",
    "title": "Plasma Data",
    "section": "",
    "text": "download_data\n\n download_data (**kwargs)\n\n\n\n\nload_data\n\n load_data (var_names:list[typing.Literal['Np','Pressure','V_GSE','V_GSE_p\n            ','THERMAL_SPD']]=['Np', 'V_GSE', 'THERMAL_SPD'],\n            datatype:Literal['k0','h0','h5']='k0', **kwargs)",
    "crumbs": [
      "Home",
      "Missions",
      "Wind mission",
      "Plasma Data"
    ]
  },
  {
    "objectID": "missions/juno/index.html",
    "href": "missions/juno/index.html",
    "title": "Juno",
    "section": "",
    "text": "------------------------------------------------------------------------------\nJuno Mission Phases                                                           \n------------------------------------------------------------------------------\nStart       Mission                                                           \nDate        Phase                                                             \n==============================================================================\n2011-08-05  Launch                                                            \n2011-08-08  Inner Cruise 1                                                    \n2011-10-10  Inner Cruise 2                                                    \n2013-05-28  Inner Cruise 3                                                    \n2013-11-05  Quiet Cruise                                                      \n2016-01-05  Jupiter Approach                                                  \n2016-06-30  Jupiter Orbital Insertion                                         \n2016-07-05  Capture Orbit                                                     \n2016-10-19  Period Reduction Maneuver                                         \n2016-10-20  Orbits 1-2                                                        \n2016-11-09  Science Orbits                                                    \n2017-10-11  Deorbit\n\n\n\nSE (Solar Equatorial)\n\nCode: se\nResampling options:\n\nNumber of seconds (1 or 60): se_rN[N]s\nResampled 1 hour: se_r1h\n\n\nPC (Planetocentric)\n\nCode: pc\nResampling options:\n\nNumber of seconds (1 or 60): pc_rN[N]s\n\n\nSS (Sun-State)\n\nCode: ss\nResampling options:\n\nNumber of seconds (1 or 60): ss_rN[N]s\n\n\nPL (Payload)\n\nCode: pl\nResampling options:\n\nNumber of seconds (1 or 60): pl_rN[N]s\n\n\n\nThere are three principal coordinate systems used to represent the data in this archive.\n\nThe SE coordinate system is a Spacecraft- Solar equatorial system and it will be used for cruise data only.\nThe sun-state (ss) and planetocentric (pc) will be used for Earth Fly By (EFB) and Jupiter orbital data.\nCartesian representations are used for all three coordinate systems. These coordinate systems are specified relative to a “target body” which may be any solar system object (but for this orbital operations will Jupiter). In what follows we will reference Jupiter as the target body, but, for example, if observations near a satellite (such as Io) are desired in Io-centric coordinates, the satellite Io may be specified as the target body.\n\nThe SE coordinate system is defined using the sun-spacecraft vector as the primary reference vector; sun’s rotation axis as the secondary reference vector (z). The x axis lies along the sun-spacecraft vector, the z axis is in the plane defined by the Sun’s rotation axis and the spacecraft-sun vector. The y axis completes the system.\nThe ss coordinate system is defined using the instantaneous Jupiter-Sun vector as the primary reference vector (x direction). The X-axis lies along this vector and is taken to be positive toward the Sun. The Jupiter orbital velocity vector is the second vector used to define the coordinate system; the y axis lies in the plane determined by the Jupiter-Sun vector and the velocity vector and is orthogonal to the x axis (very nearly the negative of the velocity vector). The vector cross product of x and y yields a vector z parallel to the northward (upward) normal of the orbit plane of Jupiter. This system is sometimes called a sun-state (ss) coordinate system since its principal vectors are the Sun vector and the Jupiter state vector.\nSpacecraft-Solar equatorial\nhttps://pds-ppi.igpp.ucla.edu/data/JNO-SS-3-FGM-CAL-V1.0/INDEX/INDEX.TAB",
    "crumbs": [
      "Home",
      "Missions",
      "Juno"
    ]
  },
  {
    "objectID": "missions/juno/index.html#background",
    "href": "missions/juno/index.html#background",
    "title": "Juno",
    "section": "",
    "text": "------------------------------------------------------------------------------\nJuno Mission Phases                                                           \n------------------------------------------------------------------------------\nStart       Mission                                                           \nDate        Phase                                                             \n==============================================================================\n2011-08-05  Launch                                                            \n2011-08-08  Inner Cruise 1                                                    \n2011-10-10  Inner Cruise 2                                                    \n2013-05-28  Inner Cruise 3                                                    \n2013-11-05  Quiet Cruise                                                      \n2016-01-05  Jupiter Approach                                                  \n2016-06-30  Jupiter Orbital Insertion                                         \n2016-07-05  Capture Orbit                                                     \n2016-10-19  Period Reduction Maneuver                                         \n2016-10-20  Orbits 1-2                                                        \n2016-11-09  Science Orbits                                                    \n2017-10-11  Deorbit\n\n\n\nSE (Solar Equatorial)\n\nCode: se\nResampling options:\n\nNumber of seconds (1 or 60): se_rN[N]s\nResampled 1 hour: se_r1h\n\n\nPC (Planetocentric)\n\nCode: pc\nResampling options:\n\nNumber of seconds (1 or 60): pc_rN[N]s\n\n\nSS (Sun-State)\n\nCode: ss\nResampling options:\n\nNumber of seconds (1 or 60): ss_rN[N]s\n\n\nPL (Payload)\n\nCode: pl\nResampling options:\n\nNumber of seconds (1 or 60): pl_rN[N]s\n\n\n\nThere are three principal coordinate systems used to represent the data in this archive.\n\nThe SE coordinate system is a Spacecraft- Solar equatorial system and it will be used for cruise data only.\nThe sun-state (ss) and planetocentric (pc) will be used for Earth Fly By (EFB) and Jupiter orbital data.\nCartesian representations are used for all three coordinate systems. These coordinate systems are specified relative to a “target body” which may be any solar system object (but for this orbital operations will Jupiter). In what follows we will reference Jupiter as the target body, but, for example, if observations near a satellite (such as Io) are desired in Io-centric coordinates, the satellite Io may be specified as the target body.\n\nThe SE coordinate system is defined using the sun-spacecraft vector as the primary reference vector; sun’s rotation axis as the secondary reference vector (z). The x axis lies along the sun-spacecraft vector, the z axis is in the plane defined by the Sun’s rotation axis and the spacecraft-sun vector. The y axis completes the system.\nThe ss coordinate system is defined using the instantaneous Jupiter-Sun vector as the primary reference vector (x direction). The X-axis lies along this vector and is taken to be positive toward the Sun. The Jupiter orbital velocity vector is the second vector used to define the coordinate system; the y axis lies in the plane determined by the Jupiter-Sun vector and the velocity vector and is orthogonal to the x axis (very nearly the negative of the velocity vector). The vector cross product of x and y yields a vector z parallel to the northward (upward) normal of the orbit plane of Jupiter. This system is sometimes called a sun-state (ss) coordinate system since its principal vectors are the Sun vector and the Jupiter state vector.\nSpacecraft-Solar equatorial\nhttps://pds-ppi.igpp.ucla.edu/data/JNO-SS-3-FGM-CAL-V1.0/INDEX/INDEX.TAB",
    "crumbs": [
      "Home",
      "Missions",
      "Juno"
    ]
  },
  {
    "objectID": "data_structure/00_config.html",
    "href": "data_structure/00_config.html",
    "title": "space-analysis.py",
    "section": "",
    "text": "PanelConfig\n\n PanelConfig (timerange:list[datetime.date|datetime.datetime]=None,\n              ds:str=None, id:str=None, name:str=None, units:str=None,\n              labels:list[str]=&lt;factory&gt;, satellite:typing.Annotated[str,S\n              tringConstraints(strip_whitespace=None,to_upper=None,to_lowe\n              r=True,strict=None,min_length=None,max_length=None,pattern=N\n              one)]=None, instrument:typing.Annotated[str,StringConstraint\n              s(strip_whitespace=None,to_upper=None,to_lower=True,strict=N\n              one,min_length=None,max_length=None,pattern=None)]=None,\n              datatype:str=None, probe:str=None)\n\nPanel configuration\n\n\n\nOutputConfig\n\n OutputConfig (path:str=None, filename:str=None,\n               formats:list[str]=&lt;factory&gt;, display:bool=False,\n               figure:dict=&lt;factory&gt;, figure_extra:space_analysis.plot.con\n               fig.FigureExtraOptions=&lt;factory&gt;)\n\nOutput configuration\n\n\n\nConfig\n\n Config (panels:list[__main__.PanelConfig],\n         timerange:list[datetime.datetime|datetime.date]=None,\n         output:__main__.OutputConfig=None, backend:str=None)",
    "crumbs": [
      "Home",
      "Data Structure",
      "00 Config"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "space-analysis.py",
    "section": "",
    "text": "Python utils for data analysis in space physics. Still in active development, use with caution.\nInspired from SpaceAnalysis.jl, created with nbdev."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "space-analysis.py",
    "section": "References",
    "text": "References\n\nspeasy : Python client for Space Physics web services such as CDAWEB or AMDA\npyspedas : Python Space Physics Environment Data Analysis Software\nfastcore : Python supercharged for the fastai library"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "space-analysis.py",
    "section": "Install",
    "text": "Install\npip install space_analysis"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "space-analysis.py",
    "section": "How to use",
    "text": "How to use"
  },
  {
    "objectID": "utils/00_math.html",
    "href": "utils/00_math.html",
    "title": "Basic math utils",
    "section": "",
    "text": "sind\n\n sind (x)\n\n\n\n\ncosd\n\n cosd (x)",
    "crumbs": [
      "Home",
      "Utils",
      "Basic math utils"
    ]
  },
  {
    "objectID": "utils/00_develop.html",
    "href": "utils/00_develop.html",
    "title": "space-analysis.py",
    "section": "",
    "text": "from loguru import logger\nfrom humanize import naturalsize\nimport polars as pl\nimport pandas as pd\nimport xarray as xr\n\n\n\ndef get_memory_usage(data):\n    datatype = type(data)\n    match datatype:\n        case pl.DataFrame:\n            size = data.estimated_size()\n        case pd.DataFrame:\n            size = data.memory_usage().sum()\n        case xr.DataArray:\n            size = data.nbytes\n\n    logger.info(f\"{naturalsize(size)} ({datatype.__name__})\")\n    return size",
    "crumbs": [
      "Home",
      "Utils",
      "00 Develop"
    ]
  },
  {
    "objectID": "utils/19_speasy.html",
    "href": "utils/19_speasy.html",
    "title": "Speasy utils",
    "section": "",
    "text": "speasy - an open source Python client for Space Physics web services such as CDAWEB or AMDA.",
    "crumbs": [
      "Home",
      "Utils",
      "Speasy utils"
    ]
  },
  {
    "objectID": "utils/19_speasy.html#functions",
    "href": "utils/19_speasy.html#functions",
    "title": "Speasy utils",
    "section": "Functions",
    "text": "Functions\n\n\nspzvars2pldf\n\n spzvars2pldf (vars:list[speasy.products.variable.SpeasyVariable])\n\n\n\n\nspzvar2pldf\n\n spzvar2pldf (var:speasy.products.variable.SpeasyVariable)\n\n\n\n\nget_time_resolution\n\n get_time_resolution (data:speasy.products.variable.SpeasyVariable)\n\n\n\n\nget_parameter_index\n\n get_parameter_index (param:str, ds:str)\n\n\n\n\nget_dataset_parameters\n\n get_dataset_parameters (v:str, provider:str='cda')\n\n\n\n\nget_dataset_index\n\n get_dataset_index (v:str, provider:str='cda')\n\n\n\n\nget_provider\n\n get_provider (v:str)\n\n\n\n\nSpeasyVariable.preview\n\n SpeasyVariable.preview ()",
    "crumbs": [
      "Home",
      "Utils",
      "Speasy utils"
    ]
  },
  {
    "objectID": "utils/19_speasy.html#data-classes",
    "href": "utils/19_speasy.html#data-classes",
    "title": "Speasy utils",
    "section": "Data Classes",
    "text": "Data Classes\nBased on SpeasyVariable class from speasy.\n\n\nVariable\n\n Variable (name:str=None, description:str=None, unit:str=None,\n           timerange:list[datetime.datetime]=None)\n\n\n\n\nVariable.dump\n\n Variable.dump (path:str)\n\nDump the configuration to a file.\n\n\n\nVariable.plot\n\n Variable.plot (fig=None, ax:matplotlib.axes._axes.Axes=None)\n\n\n\n\nSVariables\n\n SVariables ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nVariables\n\n Variables (timerange:list[datetime.datetime]=None,\n            variables:list[__main__.Variable]=None,\n            parameters:list[str]=None, dataset:str=None,\n            provider:str='cda', products:list[str|speasy.core.inventory.in\n            dexes.ParameterIndex]=None)\n\n\nearth_start = \"2019-04-09\"\nearth_end = \"2019-04-12\"\ntimerange = [earth_start, earth_end]\n\nd = spz.get_data(\n    get_parameter_index(\"MOM.P.MAGF\", \"WI_PLSP_3DP\"),\n    timerange,\n)\n\n\n\nTest\n\ntimerange = [\"2019-04-07T01:00\", \"2019-04-07T12:00\"]\nvars = Variables(\n    dataset=\"PSP_FLD_L2_MAG_RTN\",\n    parameters=[\"psp_fld_l2_mag_RTN\"],\n    timerange=timerange,\n)\n\n\ndef data_provider_summary(data_provider: DataProvider = spz.cda):\n    # show the name of the data_provider, the number of datasets, parameters and catalogs\n\n    inventory = data_provider.flat_inventory\n    print(\"Data Provider:\", data_provider.provider_name)\n    print(\"Datasets:\", len(inventory.datasets))\n    print(\"Parameters:\", len(inventory.parameters))\n    print(\"Catalogs:\", len(inventory.catalogs))\n\n\n# data_provider_summary(spz.cda)\n# data_provider_summary(spz.amda)\n# data_provider_summary(spz.csa)\n\nData Provider: cda\nDatasets: 2608\nParameters: 58510\nCatalogs: 0\nData Provider: amda\nDatasets: 1074\nParameters: 5397\nCatalogs: 24\nData Provider: csa\nDatasets: 912\nParameters: 1993\nCatalogs: 0",
    "crumbs": [
      "Home",
      "Utils",
      "Speasy utils"
    ]
  },
  {
    "objectID": "plot/01_matplotlib.html",
    "href": "plot/01_matplotlib.html",
    "title": "Basic utils",
    "section": "",
    "text": "Change the default style of the plots\n\n\nsavefig\n\n savefig (name, dir='../figures', path=None, formats=['png', 'pdf'],\n          **kwargs)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nname\n\n\nname of the file\n\n\ndir\nstr\n../figures\ndirectory to save the file\n\n\npath\nNoneType\nNone\npath to the file\n\n\nformats\nlist\n[‘png’, ‘pdf’]\n\n\n\nkwargs",
    "crumbs": [
      "Home",
      "Plot",
      "Basic utils"
    ]
  },
  {
    "objectID": "io/31_lbl.html",
    "href": "io/31_lbl.html",
    "title": "lbl file format",
    "section": "",
    "text": "Read lbl file\n\n\n\nload_lbl\n\n load_lbl (filepath:str, type:str='table')\n\n*Load LBL data.\nArgs:\nfilepath: File path to load the data from.\ntype: Type of data to load. Options are ‘table’ and ‘index’.\nReturns:\nA pandas DataFrame containing the loaded data.*",
    "crumbs": [
      "Home",
      "IO",
      "lbl file format"
    ]
  }
]