# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/missions/juno/fgm.ipynb.

# %% auto 0
__all__ = ['JunoPhases', 'JunoFGMCoords', 'JunoFGMTimeResolutions', 'load_func', 'process_member', 'unpack_and_convert', 'Unpack',
           'download_data']

# %% ../../../nbs/missions/juno/fgm.ipynb 2
import pooch
import polars as pl

from tqdm import tqdm
from pipe import filter

from typing import Literal, Callable
from functools import partial

# %% ../../../nbs/missions/juno/fgm.ipynb 5
#| code-summary: type definitions
JunoPhases = Literal["CRUISE", "JUPITER"]
JunoFGMCoords = Literal['SE', 'SS', 'PL']
JunoFGMTimeResolutions = Literal["1SEC", "1MIN", "FULL"]

# %% ../../../nbs/missions/juno/fgm.ipynb 6
from ...utils.lbl import load_lbl

import os
from zipfile import ZipFile

from pooch.processors import ExtractorProcessor

# %% ../../../nbs/missions/juno/fgm.ipynb 7
def load_func(file: str):
    df: pl.DataFrame = pl.from_dataframe(load_lbl(file))
    return (
        df.lazy()
        .with_columns(
            time=pl.col("SAMPLE UTC").str.slice(0, 4).str.to_datetime("%Y")
            + pl.duration(
                milliseconds=(pl.col("DECIMAL DAY") - 1) * 24 * 60 * 60 * 1000
            )
        )
        .drop(["SAMPLE UTC", "DECIMAL DAY", "INSTRUMENT RANGE", "X", "Y", "Z"])
        .sort("time")
    )


def process_member(member, zip_file, extract_dir, clean=True):
    lbl_fp = zip_file.extract(member, path=extract_dir)
    sts_fp = zip_file.extract(member.replace(".lbl", ".sts"), path=extract_dir)

    # Convert the file to arrow format
    arrow_fp = member.replace(".lbl", ".arrow")
    load_func(lbl_fp).collect().write_ipc(arrow_fp)

    # Remove the lbl and sts files
    if clean:
        os.remove(lbl_fp)
        os.remove(sts_fp)

    return arrow_fp


def unpack_and_convert(fname, extract_dir):
    """
    Post-processing hook to unzip a file and convert it to a different format in real-time. (Otherwise the files unzipped would take up too much space on the user's computer.)

    Parameters
    ----------
    fname : str
       Full path of the zipped file in local storage

    """

    with ZipFile(fname, "r") as zip_file:
        # Extract the data file from within the archive
        members = zip_file.namelist() | filter(lambda x: x.endswith(".lbl"))
        func = partial(process_member, zip_file=zip_file, extract_dir=extract_dir)
        return list(map(func, tqdm(list(members))))


class Unpack(ExtractorProcessor):

    suffix = ".unzip"

    def _extract_file(self, fname, extract_dir):
        unpack_and_convert(fname, extract_dir)

# %% ../../../nbs/missions/juno/fgm.ipynb 8
def download_data(
    dataset="JNO-SS-3-FGM-CAL-V1.0",
    phase: JunoPhases = "CRUISE",
    coord: JunoFGMCoords = "SE",
    datatype: JunoFGMTimeResolutions = "1SEC",  # time resolution
    processor: Callable = Unpack(),
    format="arrow",
) -> list[str]:

    url = f"https://pds-ppi.igpp.ucla.edu/ditdos/download?id=pds://PPI/{dataset}/DATA/{phase}/{coord}/{datatype}"

    files = pooch.retrieve(
        url=url,
        known_hash=None,
        progressbar=True,
        processor=processor,
    )

    return sorted(files | filter(lambda x: x.endswith(f".{format}")))
