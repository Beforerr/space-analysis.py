# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Variable', 'Variables', 'SVariable', 'SVariables', 'Dataset', 'Instrument', 'Mission']

# %% ../nbs/00_core.ipynb 1
from pydantic import ConfigDict
from pydantic.dataclasses import dataclass
from datetime import datetime

# %% ../nbs/00_core.ipynb 3
@dataclass(config=ConfigDict(extra='allow'))
class Variable:
    name: str = None
    description: str = None
    unit: str = None
    timerange: list[datetime] = None
    
@dataclass
class Variables:
    variables: dict[str, Variable] = None
    def add_variable(self, variable: Variable):
        self.variables[variable.name] = variable

# %% ../nbs/00_core.ipynb 5
import polars as pl
from functools import cached_property
from abc import abstractmethod

# %% ../nbs/00_core.ipynb 6
@dataclass
class SVariable(Variable):
    # similar to `speasy`
    provider: str = "cda"
    dataset: str = None
    parameter: str = None
    product: str = None
    """product name should be unique"""

    @abstractmethod
    def to_polars(self) -> pl.LazyFrame:
        ...

    def preview(self):
        return self.to_polars().head().collect()

    @abstractmethod
    @cached_property
    def data(self):
        """Retrieve the data if not already done."""
        ...

    def dump(self, path: str):
        """Dump the configuration to a file."""
        import yaml

        with open(path, "w") as f:
            yy = yaml.load(
                self.model_dump_json(exclude_defaults=True), Loader=yaml.FullLoader
            )
            yaml.dump(yy, f)

    @classmethod
    def load_from_file(cls, path: str):
        """Load the configuration from a file."""
        import yaml

        with open(path, "r") as f:
            yy = yaml.load(f, Loader=yaml.FullLoader)
            return cls(**yy)
        
class SVariables:

    products: list[str] = None
    parameters: list[str] = None

    _data: list[Variable] = None

# %% ../nbs/00_core.ipynb 8
@dataclass
class Dataset(Variables):
    name: str = None

# %% ../nbs/00_core.ipynb 10
@dataclass
class Instrument:
    name: str
    datasets: dict[str, Dataset] = None

    def add_dataset(self, dataset: Dataset):
        self.datasets[dataset.name] = dataset


@dataclass
class Mission:
    name: str
    """Name of the mission"""
    instruments: dict[str, Instrument] = None
    datasets: dict[str, Dataset] = None

    def add_instrument(self, instrument: Instrument):
        self.instruments[instrument.name] = instrument
